import{_ as s,o as n,c as a,S as t}from"./chunks/framework.2524ba1c.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/TypeScript/基本用法/any 类型/index.md","filePath":"前端/TypeScript/基本用法/any 类型/index.md"}'),l={name:"前端/TypeScript/基本用法/any 类型/index.md"},o=t(`<h2 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">​</a></h2><p>使用“any”会禁用所有进一步的类型检查。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 以下代码行都不会引发编译器错误。</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>不过，您通常希望避免这种情况，因为 any 没有进行类型检查。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>当您不指定类型并且 TypeScript 无法从上下文中推断出类型时，编译器通常会默认为 any.</p></div><h2 id="unknown" tabindex="-1">unknown <a class="header-anchor" href="#unknown" aria-label="Permalink to &quot;unknown&quot;">​</a></h2><p>unknown 类型代表任何值。这与类型类似 any，但更安全，因为对值执行任何操作都是不合法的 unknown</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> v1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">v1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错</span></span></code></pre></div><p>那么，怎么才能使用 unknown 类型变量呢？答案是只有经过“类型缩小”。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">r</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 正确</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="never" tabindex="-1">never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;never&quot;">​</a></h2><p>“空类型”的概念，即该类型为空，不包含任何值。</p><p>由于不存在任何属于“空类型”的值，所以该类型被称为 never，即不可能有这样的值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面示例中，变量 x 的类型是 never，就不可能赋给它任何值，否则都会报错。</p><h2 id="兼容表" tabindex="-1">兼容表 <a class="header-anchor" href="#兼容表" aria-label="Permalink to &quot;兼容表&quot;">​</a></h2><p>下表总结了一些抽象类型之间的可分配性。行指示每个可分配的内容，列指示可分配给它们的内容。“</p><table><thead><tr><th></th><th>any</th><th>unknown</th><th>object</th><th>void</th><th>undefined</th><th>null</th><th>never</th></tr></thead><tbody><tr><td>any →</td><td></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✕</td></tr><tr><td>unknown →</td><td>✓</td><td></td><td>✕</td><td>✕</td><td>✕</td><td>✕</td><td>✕</td></tr><tr><td>object →</td><td>✓</td><td>✓</td><td></td><td>✕</td><td>✕</td><td>✕</td><td>✕</td></tr><tr><td>void →</td><td>✓</td><td>✓</td><td>✕</td><td></td><td>✕</td><td>✕</td><td>✕</td></tr><tr><td>undefined →</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td><td>✓</td><td>✕</td></tr><tr><td>null →</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td><td>✕</td></tr><tr><td>never →</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td></tr></tbody></table>`,18),p=[o];function e(r,c,d,y,D,C){return n(),a("div",null,p)}const A=s(l,[["render",e]]);export{F as __pageData,A as default};
