import{_ as s,c as i,o as a,a5 as e}from"./chunks/framework.-E9IboRH.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/前端Vue/基础题/Vue 3 Tree-shaking？.md","filePath":"汇总面试题/前端Vue/基础题/Vue 3 Tree-shaking？.md"}'),n={name:"汇总面试题/前端Vue/基础题/Vue 3 Tree-shaking？.md"},t=e(`<p>在 Vue 3.0 中，Tree-shaking 是指通过静态分析代码，去除未使用的模块和代码片段，从而减小打包后的文件体积。</p><h2 id="以下是-vue-3-0-中-tree-shaking-特性的一些重要方面" tabindex="-1">以下是 Vue 3.0 中 Tree-shaking 特性的一些重要方面： <a class="header-anchor" href="#以下是-vue-3-0-中-tree-shaking-特性的一些重要方面" aria-label="Permalink to &quot;以下是 Vue 3.0 中 Tree-shaking 特性的一些重要方面：&quot;">​</a></h2><ol><li><strong>按需导入</strong>：Vue 3.0 支持按需导入组件和功能模块，开发者可以只导入需要使用的组件和模块，而不是导入整个 Vue 库。这样能够减小打包后的文件体积，并且提高加载速度。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Button, Input } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ant-design-vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Button.name, Button);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Input.name, Input);</span></span></code></pre></div><ol start="2"><li><p><strong>ES 模块</strong>：Vue 3.0 使用 ES 模块来组织代码，而 ES 模块天然支持静态分析，使得 Tree-shaking 更加高效和可靠。开发者可以放心地使用 ES 模块来管理自己的代码和第三方库。</p></li><li><p><strong>内部优化</strong>：Vue 3.0 对内部代码进行了优化，包括将一些常用的工具函数抽离成单独的模块，减少重复代码的出现，从而使得 Tree-shaking 更容易实现。</p></li><li><p><strong>标记副作用</strong>：Vue 3.0 中引入了 <code>__PURE__</code> 标记来标记没有副作用的代码，使得 Tree-shaking 更加准确。通过标记副作用，开发者可以告诉打包工具哪些代码是纯净的，可以安全地删除。</p></li></ol><p>综上所述，Vue 3.0 中的 Tree-shaking 特性使得开发者能够更有效地管理和优化代码，从而减小应用程序的体积，提高性能和加载速度。通过按需导入组件和模块、使用 ES 模块、内部优化以及标记副作用等方式，开发者可以轻松地实现 Tree-shaking，从而获得更好的用户体验。</p>`,6),p=[t];function h(l,k,r,o,g,d){return a(),i("div",null,p)}const u=s(n,[["render",h]]);export{c as __pageData,u as default};
