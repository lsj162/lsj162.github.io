import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.-E9IboRH.js";const c=JSON.parse('{"title":"应用题：什么是防抖和节流？有什么区别？如何实现？","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"汇总面试题/前端JavaScript/应用题/应用题：实现防抖和节流？.md","filePath":"汇总面试题/前端JavaScript/应用题/应用题：实现防抖和节流？.md"}'),t={name:"汇总面试题/前端JavaScript/应用题/应用题：实现防抖和节流？.md"},l=n(`<h1 id="应用题-什么是防抖和节流-有什么区别-如何实现" tabindex="-1">应用题：什么是防抖和节流？有什么区别？如何实现？ <a class="header-anchor" href="#应用题-什么是防抖和节流-有什么区别-如何实现" aria-label="Permalink to &quot;应用题：什么是防抖和节流？有什么区别？如何实现？&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">推荐</p><p>项目中，推荐使用 lodash 库</p></div><h2 id="什么是防抖节流" tabindex="-1">什么是防抖节流？ <a class="header-anchor" href="#什么是防抖节流" aria-label="Permalink to &quot;什么是防抖节流？&quot;">​</a></h2><ol><li><p><strong>防抖（Debouncing）：</strong></p><ul><li><strong>定义：</strong> 防抖是一种延迟执行的策略，在触发事件后，等待一定的时间间隔，如果在这个间隔内没有再次触发相同事件，就执行相应的函数。</li><li><strong>应用场景：</strong> 防抖常用于处理输入框输入事件、窗口大小改变等频繁触发的事件，以避免过多地触发相应函数。</li></ul><p><strong>实现方式：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, delay);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>节流（Throttling）：</strong></p><ul><li><strong>定义：</strong> 节流是一种控制执行频率的策略，它确保函数在一定时间间隔内只执行一次，无论触发了多少次事件。</li><li><strong>应用场景：</strong> 节流常用于滚动事件、鼠标移动事件等高频触发的事件，以保证一定时间内只执行一次函数。</li></ul><p><strong>实现方式：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> currentTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delay) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      lastTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p><strong>区别：</strong></p><ul><li><strong>执行时刻：</strong> 防抖在一系列触发事件后等待一段时间执行，而节流在一定时间间隔内执行一次。</li><li><strong>频率控制：</strong> 防抖会等待一定时间，确保在这段时间内没有新的触发事件，而节流是每隔一定时间执行一次，不管触发了多少次事件。</li></ul><p>选择使用防抖还是节流取决于具体的应用场景和需求。</p><h2 id="考察点-动机实际意义" tabindex="-1">考察点，动机实际意义； <a class="header-anchor" href="#考察点-动机实际意义" aria-label="Permalink to &quot;考察点，动机实际意义；&quot;">​</a></h2><p>防抖（Debouncing）和节流（Throttling）都是用来限制函数执行频率的技术，特别是在处理用户输入或其他频繁触发的事件时非常有用。它们的目标是减少事件处理或函数执行的次数，从而提高性能和优化用户体验。</p>`,9),h=[l];function p(k,e,r,E,d,g){return a(),i("div",null,h)}const y=s(t,[["render",p]]);export{c as __pageData,y as default};
