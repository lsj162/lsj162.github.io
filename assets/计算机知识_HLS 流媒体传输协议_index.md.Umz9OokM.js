import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.DALfHeHd.js";const u=JSON.parse('{"title":"HLS 流媒体传输协议","description":"","frontmatter":{},"headers":[],"relativePath":"计算机知识/HLS 流媒体传输协议/index.md","filePath":"计算机知识/HLS 流媒体传输协议/index.md","lastUpdated":1716891854000}'),e={name:"计算机知识/HLS 流媒体传输协议/index.md"},l=t(`<h1 id="hls-流媒体传输协议" tabindex="-1">HLS 流媒体传输协议 <a class="header-anchor" href="#hls-流媒体传输协议" aria-label="Permalink to &quot;HLS 流媒体传输协议&quot;">​</a></h1><p>HLS 全称是 HTTP Live Streaming，是一个由 Apple 公司提出的基于 HTTP 的媒体流传输协议，用于实时音视频流的传输。目前 HLS 协议被广泛的应用于视频点播和直播领域。</p><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p>HLS 跟 DASH 协议的原理非常类似。通过将整条流切割成一个小的可以通过 HTTP 下载的媒体文件，然后提供一个配套的媒体列表文件，提供给客户端，让客户端顺序地拉取这些媒体文件播放，来实现看上去是在播放一条流的效果。由于传输层协议只需要标准的 HTTP 协议，HLS 可以方便的透过防火墙或者代理服务器，而且可以很方便的利用 CDN 进行分发加速，并且客户端实现起来也很方便。</p><p>HLS 把整个流分成一个个小的基于 HTTP 的文件来下载，每次只下载一些。</p><p>HLS 协议由三部分组成：</p><p>HTTP：传输协议 M3U8：索引文件 TS：音视频的媒体信息 关于 HLS 的详细介绍可参考：draft-pantos-http-live-streaming</p><p>在 HTML5 页面上使用 HLS 非常简单：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.m3u8&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>或者：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.m3u8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>M3U8 索引文件 HLS 的 m3u8 文件，是一个 TS 的列表，也就是告诉浏览器可以播放这些 TS 文件：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXTM3U</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXT-X-VERSION:3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXT-X-MEDIA-SEQUENCE:64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXT-X-TARGETDURATION:12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXTINF:11.550</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">livestream-64.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXTINF:5.250</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">livestream-65.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXTINF:7.700</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">livestream-66.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#EXTINF:6.850</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">livestream-67.ts</span></span></code></pre></div><p>有几个关键的参数，这些参数在 SRS 的配置文件中都有配置项：</p><ul><li>EXT-X-TARGETDURATION：所有切片的最大时长。有些 Apple 设备这个参数不正确会无法播放。SRS 会自动计算出 ts 文件的最大时长，然后更新 m3u8 时会自动更新这个值。用户不必自己配置。</li><li>EXTINF：ts 切片的实际时长，SRS 提供配置项 hls_fragment，但实际上的 ts 时长还受 gop 影响。 ts 文件的数目：SRS 可配置 hls_window，指定 m3u8 中保存多少个切片，SRS 会自动清理旧的切片。</li><li>livestream-67.ts：SRS 会自动维护 ts 切片的文件名，在编码器重推之后，这个编号会继续增长，保证流的连续性。直到 SRS 重启，这个编号才重置为 0。 譬如，每个 ts 切片为 10 秒，窗口为 60 秒，那么 m3u8 中会保存 6 个 ts 切片。</li></ul><p>每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，video 标签会解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 Web 服务器上，ts 文件放在 CDN 上。</p><p>.m3u8 文件，其实就是以 UTF-8 编码的 m3u 文件，这个文件本身不能播放，只是存放了播放信息的文本文件。</p><h2 id="技术架构" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构" aria-label="Permalink to &quot;技术架构&quot;">​</a></h2><p>HLS 的架构分为三部分：Server、CDN 和 Client，即服务器、分发组件和客户端。</p><p>下面是 HLS 整体架构图：</p><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Server&quot;">​</a></h3><p>服务器端将视频数据流编码、封装和切割为连续的、时长很短的 MPEG-TS 格式的文件，通常一个 ts 分片大概是 10s；并提供一个配套的媒体列表文件（m3u8 文件）。</p><h3 id="视频封装格式-mpeg-ts。" tabindex="-1">视频封装格式：MPEG-TS。 <a class="header-anchor" href="#视频封装格式-mpeg-ts。" aria-label="Permalink to &quot;视频封装格式：MPEG-TS。&quot;">​</a></h3><p>编码：视频编码为 H.264，音频编码为 AAC, MP3, AC-3 或者 EC-3 格式。</p><p>HLS 也支持纯音频格式，通常是 MPEG 基本音频文件（MP4 封装的 AAC 格式）。</p><h3 id="distribution" tabindex="-1">Distribution <a class="header-anchor" href="#distribution" aria-label="Permalink to &quot;Distribution&quot;">​</a></h3><p>由标准的网络服务器组成，接收客户端的请求和分发所有的资源包括 m3u8 列表文件和 ts 分片文件。</p><h3 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;Client&quot;">​</a></h3><p>客户端先通过下载 m3u8 文件，再通过 m3u8 文件的索引地址顺序地拉取 ts 媒体文件播放。对于直播，它的索引文件一直处于动态变化的，你需要不断的更新索引文件 playlist 然后移除旧的索引文件。</p><h2 id="hls-协议规定" tabindex="-1">HLS 协议规定： <a class="header-anchor" href="#hls-协议规定" aria-label="Permalink to &quot;HLS 协议规定：&quot;">​</a></h2><ul><li>视频的封装格式是 TS</li><li>视频编码格式为 H264，音频编码格式为 MP3、AAC 或者 AC-3</li><li>除了 TS 视频文件本身，还定义了用来控制播放的 m3u8 文件</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p>B 站直播中 HLS 和去中心化 P2P 的实际应用</p>`,33),n=[l];function p(h,r,k,d,E,o){return a(),i("div",null,n)}const g=s(e,[["render",p]]);export{u as __pageData,g as default};
