import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.DALfHeHd.js";const y=JSON.parse('{"title":"数组 (Array)","description":"","frontmatter":{},"headers":[],"relativePath":"计算机知识/数据结构/线性数据结构/数组 (Array)/数组 (Array).md","filePath":"计算机知识/数据结构/线性数据结构/数组 (Array)/数组 (Array).md","lastUpdated":1716891854000}'),h={name:"计算机知识/数据结构/线性数据结构/数组 (Array)/数组 (Array).md"},p=t('<h1 id="数组-array" tabindex="-1">数组 (Array) <a class="header-anchor" href="#数组-array" aria-label="Permalink to &quot;数组 (Array)&quot;">​</a></h1><p>数组是数据存储的基本结构，它将相同类型的数据存储在一块连续的内存空间中。数组通常由一系列相同类型的元素按照顺序排列组成，每一个元素在数组中都可以通过唯一的索引（或称为下标）来访问。数组中的元素是连续存放的，所以可以利用元素的索引计算出元素在内存中的地址。</p><p>数组的基本特点包括：</p><ol><li><p><strong>随机访问</strong>：由于数组元素是连续存放的，所以访问数组的任何元素的时间复杂度都是 O(1)，非常高效。</p></li><li><p><strong>固定长度</strong>：在 C/C++等语言中，数组通常有一个固定的长度，一旦声明，其长度就不能改变。</p></li><li><p><strong>同类型元素</strong>：数组中存储的元素必须是相同的数据类型。</p></li><li><p><strong>索引从 0 开始</strong>：在大多数编程语言中，数组的索引是从 0 开始的。</p></li><li><p><strong>内存连续</strong>：数组元素在内存中是连续存放的，这对于硬件优化有好处，但是可能导致内存碎片等问题。</p></li></ol><p>数组的操作通常包括初始化、遍历、元素的访问和修改、插入和删除等。数组可以是一维的，也可以是多维的（比如二维数组，即矩阵）。在编程语言中，数组通常是基本的数据结构，几乎所有语言都提供了对数组的支持。</p><p>例如，在 C 语言中，可以这样声明和初始化一个数组：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在 Python 中，可以这样声明和初始化一个数组：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>数组在数据结构和算法中的应用非常广泛，比如在排序算法中，常使用数组来存储待排序的数据，同时在实现某些算法时，也可以利用数组的特性来提高算法的效率</p>',10),n=[p];function l(k,e,r,d,E,o){return a(),i("div",null,n)}const c=s(h,[["render",l]]);export{y as __pageData,c as default};
