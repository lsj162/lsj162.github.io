import{_ as e,c as t,o as a,a6 as p}from"./chunks/framework.DwCPU-X7.js";const u=JSON.parse('{"title":"Set","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/官方文档基础教程/内置对象/键值集合/Set/index.md","filePath":"前端/JavaScript/官方文档基础教程/内置对象/键值集合/Set/index.md","lastUpdated":1712399324000}'),o={name:"前端/JavaScript/官方文档基础教程/内置对象/键值集合/Set/index.md"},r=p('<h1 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h1><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><p>Set.prototype.add(value) 在 Set 对象尾部添加一个元素。返回该 Set 对象。</p><p>Set.prototype.clear() 移除 Set 对象内的所有元素。</p><p>Set.prototype.delete(value) 移除值为 value 的元素，并返回一个布尔值来表示是否移除成功。Set.prototype.has(value) 会在此之后返回 false。</p><p>Set.prototype.entries() 返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值的 [value, value] 数组。为了使这个方法和 Map 对象保持相似，每个值的键和值相等。</p><p>Set.prototype.forEach(callbackFn[, thisArg]) 按照插入顺序，为 Set 对象中的每一个值调用一次 callBackFn。如果提供了 thisArg 参数，回调中的 this 会是这个参数。</p><p>Set.prototype.has(value) 返回一个布尔值，表示该值在 Set 中存在与否。</p><p>Set.prototype.keys() 与 values() 方法相同，返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。</p><p>Set.prototype.values() 返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。</p><p>Set.prototype[@@iterator]() 返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。</p>',12),s=[r];function l(i,S,c,n,d,_){return a(),t("div",null,s)}const v=e(o,[["render",l]]);export{u as __pageData,v as default};
