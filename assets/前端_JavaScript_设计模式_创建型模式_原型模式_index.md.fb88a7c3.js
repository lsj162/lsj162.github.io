import{_ as s,o as a,c as n,S as o}from"./chunks/framework.2524ba1c.js";const i=JSON.parse('{"title":"原型模式（Prototype Pattern）","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/设计模式/创建型模式/原型模式/index.md","filePath":"前端/JavaScript/设计模式/创建型模式/原型模式/index.md"}'),p={name:"前端/JavaScript/设计模式/创建型模式/原型模式/index.md"},l=o(`<h1 id="原型模式-prototype-pattern" tabindex="-1">原型模式（Prototype Pattern） <a class="header-anchor" href="#原型模式-prototype-pattern" aria-label="Permalink to &quot;原型模式（Prototype Pattern）&quot;">​</a></h1><p>原型模式（Prototype Pattern）是一种创建型设计模式，用于创建对象的方式是通过复制一个现有对象的原型，从而创建新的对象。它通过克隆现有对象来创建新对象，而不是通过构造函数或工厂方法创建。原型模式的核心思想是使用一个现有对象作为蓝图，然后复制这个蓝图以创建新对象。</p><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>大对象的创建成本高昂：如果创建一个对象需要复杂的初始化过程或大量资源，复制一个现有对象可能比从头开始创建对象更有效。</p><p>对象的配置差异较小：当需要创建多个对象，它们的配置差异很小，只有一些属性值不同，可以使用原型模式来避免重复配置相同的属性。</p><p>减少构造函数的调用：通过原型模式，可以减少构造函数的调用次数，提高性能。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 原型对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">property1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Default Value 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">property2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Default Value 2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clone</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clone</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用原型对象创建新对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> object1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">object1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">property1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Custom Value 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> object2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">object2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">property2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Custom Value 2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(object1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(object2)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在上面的示例中，prototype 是原型对象，它定义了默认的属性和一个 clone 方法，该方法克隆原型对象并返回一个新对象。通过调用 clone 方法，可以创建新的对象，并根据需要设置不同的属性值。</p><p>原型模式允许你通过复制现有对象的方式来创建新对象，从而减少重复的初始化工作，提高效率。这在某些情况下尤其有用，特别是当对象的构建过程较为复杂或需要耗费大量资源时。</p>`,10),e=[l];function t(c,r,D,y,F,A){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
