import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.DwCPU-X7.js";const y=JSON.parse('{"title":"🚀 Set","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/基础笔记/Set 和 Map 数据结构.md","filePath":"前端/JavaScript/基础笔记/Set 和 Map 数据结构.md","lastUpdated":1711979253000}'),t={name:"前端/JavaScript/基础笔记/Set 和 Map 数据结构.md"},l=e(`<h1 id="🚀-set" tabindex="-1">🚀 Set <a class="header-anchor" href="#🚀-set" aria-label="Permalink to &quot;🚀 Set&quot;">​</a></h1><p>ES6 提供了新的 new Set。没有重复的值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><h2 id="set-结构有以下三个方法及属性。" tabindex="-1">Set 结构有以下三个方法及属性。 <a class="header-anchor" href="#set-结构有以下三个方法及属性。" aria-label="Permalink to &quot;Set 结构有以下三个方法及属性。&quot;">​</a></h2><ol><li>constructor：构造函数，默认就是 Set 函数。</li><li>size：返回 Set 实例的成员总数。</li><li>add(value)：添加某个值，返回 Set 结构本身。</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员。</li><li>clear()：清除所有成员，没有返回值。</li></ol><h1 id="🚀-weakset" tabindex="-1">🚀 WeakSet <a class="header-anchor" href="#🚀-weakset" aria-label="Permalink to &quot;🚀 WeakSet&quot;">​</a></h1><ol><li>WeakSet 的<code>成员</code>只能是对象和 Symbol 值，而不能是其他类型的值。</li><li>WeakSet 中的对象都是弱引用</li></ol><p>WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]);</span></span></code></pre></div><h2 id="weakset-结构有以下三个方法。" tabindex="-1">WeakSet 结构有以下三个方法。 <a class="header-anchor" href="#weakset-结构有以下三个方法。" aria-label="Permalink to &quot;WeakSet 结构有以下三个方法。&quot;">​</a></h2><ol><li>add(value)：向 WeakSet 实例添加一个新成员，返回 WeakSet 结构本身。</li><li>delete(value)：清除 WeakSet 实例的指定成员，清除成功返回 true。</li><li>has(value)：是否存在返回一个布尔值。</li></ol><h1 id="🚀-map" tabindex="-1">🚀 Map <a class="header-anchor" href="#🚀-map" aria-label="Permalink to &quot;🚀 Map&quot;">​</a></h1><ol><li>允许键实际上是跟内存地址绑定</li><li>如果对同一个键多次赋值，后面的值将覆盖前面的值。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { p: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;content&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><h2 id="map-结构有以下三个方法及属性" tabindex="-1">Map 结构有以下三个方法及属性： <a class="header-anchor" href="#map-结构有以下三个方法及属性" aria-label="Permalink to &quot;Map 结构有以下三个方法及属性：&quot;">​</a></h2><ol><li>size 属性返回 Map 结构的成员总数。</li><li>set(key, value) 方法设置键名 key 对应的键值为 value</li><li>get(key) 方法读取 key 对应的键值</li><li>has(key) 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li><li>delete(key) 方法删除某个键，返回 true。</li><li>clear() 方法清除所有成员，没有返回值。</li></ol><h1 id="🚀-weakmap" tabindex="-1">🚀 WeakMap <a class="header-anchor" href="#🚀-weakmap" aria-label="Permalink to &quot;🚀 WeakMap&quot;">​</a></h1><ol><li>WeakMap 只接受对象 和 Symbol 值作为键名，不接受其他类型的值作为键名。</li><li>WeakMap 是基于弱引用的数据结构，的键名所指向的对象，不计入垃圾回收机制。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some information&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;some information&quot;</span></span></code></pre></div><h2 id="map-结构有以下三个方法及属性-1" tabindex="-1">Map 结构有以下三个方法及属性： <a class="header-anchor" href="#map-结构有以下三个方法及属性-1" aria-label="Permalink to &quot;Map 结构有以下三个方法及属性：&quot;">​</a></h2><ol><li>set(key, value) 方法设置键名 key 对应的键值为 value</li><li>get(key) 方法读取 key 对应的键值</li><li>has(key) 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li><li>delete(key) 方法删除某个键，返回 true。</li></ol><h1 id="🚀-weakref" tabindex="-1">🚀 WeakRef <a class="header-anchor" href="#🚀-weakref" aria-label="Permalink to &quot;🚀 WeakRef&quot;">​</a></h1><p>ES2021 更进一步，提供了 WeakRef 对象，用于直接创建对象的弱引用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target);</span></span></code></pre></div><h1 id="🚀-finalizationregistry" tabindex="-1">🚀 FinalizationRegistry <a class="header-anchor" href="#🚀-finalizationregistry" aria-label="Permalink to &quot;🚀 FinalizationRegistry&quot;">​</a></h1><p>ES2021 引入了清理器注册表功能，用来指定目标对象被垃圾回收机制清除以后，所要执行的回调函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FinalizationRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">heldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,27),h=[l];function n(k,p,r,d,o,E){return a(),i("div",null,h)}const c=s(t,[["render",n]]);export{y as __pageData,c as default};
