import{_ as e,c as o,o as t,a5 as l}from"./chunks/framework.-E9IboRH.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/前端Vue/基础题/Vue生命周期？.md","filePath":"汇总面试题/前端Vue/基础题/Vue生命周期？.md"}'),i={name:"汇总面试题/前端Vue/基础题/Vue生命周期？.md"},d=l("<p>在 Vue.js 中，组件的生命周期包括创建、挂载、更新和销毁等阶段。每个阶段都有对应的钩子函数，开发者可以在这些钩子函数中执行自定义的代码以处理特定阶段的逻辑。以下是 Vue 组件生命周期中常见的钩子函数及其对应的阶段：</p><ol><li><p><strong>创建阶段（Initialization）</strong>：</p><ul><li><code>beforeCreate</code>：在实例初始化之后，数据观测和事件配置之前被调用。</li><li><code>created</code>：实例已经创建完成之后被调用，此时实例已经完成数据观测、属性和方法的运算，但尚未挂载到 DOM 上。</li></ul></li><li><p><strong>挂载阶段（Mounting）</strong>：</p><ul><li><code>beforeMount</code>：在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li><code>mounted</code>：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子函数。此时，组件已经渲染完成，可以操作 DOM 元素。</li></ul></li><li><p><strong>更新阶段（Updating）</strong>：</p><ul><li><code>beforeUpdate</code>：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。此时，可对数据进行修改，但不会触发附加的重渲染过程。</li><li><code>updated</code>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁后会调用该钩子函数。在这里可以执行依赖于 DOM 的操作。</li></ul></li><li><p><strong>销毁阶段（Destruction）</strong>：</p><ul><li><code>beforeDestroy</code>：实例销毁之前调用。此时实例仍然完全可用。</li><li><code>destroyed</code>：实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有事件监听器会被移除，所有子实例也会被销毁。</li></ul></li></ol><p>此外，还有两个特殊的钩子函数：</p><ul><li><code>activated</code>：keep-alive 组件激活时调用。</li><li><code>deactivated</code>：keep-alive 组件停用时调用。</li></ul><p>通过这些生命周期钩子函数，开发者可以在不同的阶段添加自定义的逻辑，实现更丰富的功能和更精细的控制。</p>",5),c=[d];function r(a,n,s,_,p,u){return t(),o("div",null,c)}const g=e(i,[["render",r]]);export{f as __pageData,g as default};
