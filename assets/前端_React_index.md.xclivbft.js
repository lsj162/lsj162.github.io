import{_ as e,c as a,o as t,a5 as c}from"./chunks/framework.AYenO5Lm.js";const u=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[],"relativePath":"前端/React/index.md","filePath":"前端/React/index.md"}'),r={name:"前端/React/index.md"},o=c('<h1 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h1><p>React 是一个用于构建用户界面的 JavaScript 库。它由 Facebook 开发并开源，用于创建大规模、高性能的 Web 应用程序。</p><h2 id="react-的主要特点" tabindex="-1">React 的主要特点： <a class="header-anchor" href="#react-的主要特点" aria-label="Permalink to &quot;React 的主要特点：&quot;">​</a></h2><p>组件化：React 的组件化开发模式使得代码更易维护。</p><p>声明式设计： React 使用声明式的方式描述用户界面，开发人员只需关注界面应该呈现什么样子，而不需要关心底层的 DOM 操作。</p><p>虚拟 DOM： React 通过在内存中维护一个虚拟的 DOM 树来减少直接操作真实 DOM 的次数。</p><p>单向数据流： React 采用了单向数据流的模型，即数据只能从父组件流向子组件，子组件不能直接修改父组件的数据。</p><p>生命周期管理： React 组件具有生命周期方法，不同阶段执行特定的逻辑。</p><p>适用于移动端开发： React Native 是基于 React 的移动端开发框架，允许开发者使用 React 的语法和思想构建原生移动应用。</p><p>服务器端渲染(SSR)： React 支持服务器端渲染，这对于提高应用的性能、搜索引擎优化和改善用户体验都是有益的。</p><h2 id="方案" tabindex="-1">方案 <a class="header-anchor" href="#方案" aria-label="Permalink to &quot;方案&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">技术方案</p><p>常见的技术方案，由 Vite（或 Webpack），React，React Router，Redux（或 Mobx），Scss（或 Less），axios 组合开发。</p><p>服务端渲染：</p><p>一般采用 Next.js 应用框架。</p></div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://react.dev/learn" target="_blank" rel="noreferrer">官网：- 开发文档：https://react.dev/</a></p>',14),s=[o];function p(i,n,d,l,h,_){return t(),a("div",null,s)}const b=e(r,[["render",p]]);export{u as __pageData,b as default};
