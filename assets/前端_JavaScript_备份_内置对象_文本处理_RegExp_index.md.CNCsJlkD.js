import{_ as s,c as i,o as a,a5 as p}from"./chunks/framework.-E9IboRH.js";const c=JSON.parse('{"title":"RegExp(正则表达式)","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/备份/内置对象/文本处理/RegExp/index.md","filePath":"前端/JavaScript/备份/内置对象/文本处理/RegExp/index.md"}'),t={name:"前端/JavaScript/备份/内置对象/文本处理/RegExp/index.md"},e=p(`<h1 id="regexp-正则表达式" tabindex="-1">RegExp(正则表达式) <a class="header-anchor" href="#regexp-正则表达式" aria-label="Permalink to &quot;RegExp(正则表达式)&quot;">​</a></h1><p>RegExp 对象用于将文本与一个模式匹配。</p><p>以下三种表达式都会创建相同的正则表达式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//字面量形式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ab+c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 首个参数为字符串模式的构造函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 首个参数为常规字面量的构造函数</span></span></code></pre></div><h2 id="常见的实例方法" tabindex="-1">常见的实例方法 <a class="header-anchor" href="#常见的实例方法" aria-label="Permalink to &quot;常见的实例方法&quot;">​</a></h2><p>RegExp.prototype.exec() 在该字符串中执行匹配项的搜索。</p><p>RegExp.prototype.test() 该正则在字符串里是否有匹配。</p><p>RegExp.prototype[@@match]() 对给定字符串执行匹配并返回匹配结果。</p><p>RegExp.prototype[@@matchAll]() 对给定字符串执行匹配，返回所有匹配结果。</p><p>RegExp.prototype[@@replace]() 给定新的子串，替换所有匹配结果。</p><p>RegExp.prototype[@@search]() 在给定字符串中搜索匹配项，并返回在字符串中找到字符索引。</p><p>RegExp.prototype[@@split]() 通过将给定字符串拆分为子字符串，并返回字符串形成的数组。</p>`,12),h=[e];function n(l,k,r,d,o,E){return a(),i("div",null,h)}const F=s(t,[["render",n]]);export{c as __pageData,F as default};
