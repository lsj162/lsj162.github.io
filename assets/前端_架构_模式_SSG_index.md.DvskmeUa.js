import{_ as a,c as t,o as e,a5 as l}from"./chunks/framework.AYenO5Lm.js";const u=JSON.parse('{"title":"SSG","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/架构/模式/SSG/index.md","filePath":"前端/架构/模式/SSG/index.md"}'),o={name:"前端/架构/模式/SSG/index.md"},i=l('<h1 id="ssg" tabindex="-1">SSG <a class="header-anchor" href="#ssg" aria-label="Permalink to &quot;SSG&quot;">​</a></h1><p>SSG 代表&quot;Static Site Generator&quot;，即静态站点生成器。静态站点生成器是一种用于创建静态网站的工具，它将动态内容转换为静态 HTML 文件。这种方法的主要优势在于提供了更快的加载速度、更好的性能和更简单的部署过程。</p><h2 id="以下是-ssg-技术的详细概述" tabindex="-1">以下是 SSG 技术的详细概述： <a class="header-anchor" href="#以下是-ssg-技术的详细概述" aria-label="Permalink to &quot;以下是 SSG 技术的详细概述：&quot;">​</a></h2><ol><li>生成静态页面：</li></ol><p>SSG 工具将 Web 应用程序的源代码和内容（通常是 Markdown、JSON 或 YAML 文件）转换为静态 HTML、CSS 和 JavaScript 文件。 这个过程在构建时（通常是在部署之前）完成，因此在运行时不需要服务器端的动态处理。</p><ol start="2"><li>性能优势：</li></ol><p>由于所有页面都是预先生成的静态文件，用户在访问网站时可以直接下载这些文件，无需等待服务器处理。 这导致更快的加载时间和更好的性能，尤其是对于内容不经常变化的网站。</p><ol start="3"><li>SEO 友好：</li></ol><p>静态站点对搜索引擎更为友好，因为搜索引擎能够轻松地爬取和索引静态 HTML 文件。 此外，SSG 通常会生成干净、语义化的 HTML，这对搜索引擎排名和搜索结果的质量也有积极影响。</p><ol start="4"><li>无服务器架构：</li></ol><p>静态站点不需要运行服务器端代码，因此可以更容易地扩展和部署到无服务器架构（如 AWS Lambda、Netlify 等）。 无服务器架构通常可以提供更低的成本和更高的可伸缩性。</p><ol start="5"><li>前端框架整合：</li></ol><p>许多现代前端框架，如 React、Vue 和 Angular，可以与 SSG 集成，允许使用这些框架构建动态组件，然后在构建时将其转换为静态文件。</p><ol start="6"><li>内容管理系统（CMS）整合：</li></ol><p>SSG 可以与各种 CMS 集成，使非技术人员能够轻松地编辑和管理网站的内容。 这种集成通常通过将 CMS 中的内容导入静态文件中来实现。</p><ol start="7"><li>部署简单：</li></ol><p>由于静态站点只是一组静态文件，部署变得非常简单。可以使用各种托管服务（如 Netlify、Vercel、GitHub Pages 等）来快速、轻松地部署网站。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2>',18),r=[i];function s(S,n,c,d,p,_){return e(),t("div",null,r)}const G=a(o,[["render",s]]);export{u as __pageData,G as default};
