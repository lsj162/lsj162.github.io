import{_ as e,o as r,c as o,S as i}from"./chunks/framework.2524ba1c.js";const h=JSON.parse('{"title":"Promise","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/内置对象/控制抽象化/Promise/index.md","filePath":"前端/JavaScript/内置对象/控制抽象化/Promise/index.md"}'),s={name:"前端/JavaScript/内置对象/控制抽象化/Promise/index.md"},a=i('<h1 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h1><p>Promise 对象表示异步操作最终的完成（或失败）以及其结果值。</p><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><p>Promise.all() 接受一个 Promise 可迭代对象作为输入，并返回单个 Promise。返回的 Promise 在所有输入的 Promise 都兑现时（包括传入的可迭代对象为空时）被兑现，其值为一个包含所有兑现值的数组。如果输入的任何 Promise 被拒绝，返回的 Promise 也会被拒绝，并返回第一个拒绝的原因。</p><p>Promise.allSettled() 接受一个 Promise 可迭代对象作为输入，并返回单个 Promise。返回的 Promise 在所有输入的 Promise 都敲定时兑现（包括传入的可迭代对象为空时），其值为一个描述每个 Promise 结果的对象数组。</p><p>Promise.any() 接受一个 Promise 可迭代对象作为输入，并返回单个 Promise。返回的 Promise 在任何输入的 Promise 兑现时兑现，其值为第一个兑现的值。如果所有输入的 Promise 都被拒绝（包括传入的可迭代对象为空时），返回的 Promise 将以带有一个包含拒绝原因的数组的 AggregateError 拒绝。</p><p>Promise.race() 接受一个 Promise 可迭代对象作为输入，并返回单个 Promise。返回的 Promise 与第一个敲定的 Promise 的最终状态保持一致。</p><p>Promise.reject() 返回一个新的 Promise 对象，该对象以给定的原因拒绝。</p><p>Promise.resolve() 返回一个新的 Promise 对象，该对象以给定的值兑现。如果值是一个 thenable 对象（即具有 then 方法），则返回的 Promise 对象会“跟随”该 thenable 对象，采用其最终的状态；否则，返回的 Promise 对象会以该值兑现。</p><p>通常，如果你不知道一个值是否是 Promise，那么最好使用 Promise.resolve(value) 将其转换成 Promise 对象，并将返回值作为 Promise 来处理。</p>',10),m=[a];function t(P,n,p,c,l,_){return r(),o("div",null,m)}const u=e(s,[["render",t]]);export{h as __pageData,u as default};
