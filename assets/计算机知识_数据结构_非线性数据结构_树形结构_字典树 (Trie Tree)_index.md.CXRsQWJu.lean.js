import{_ as t,c as r,o as a,j as e,a as i}from"./chunks/framework.DALfHeHd.js";const P=JSON.parse('{"title":"字典树 (Trie Tree)","description":"","frontmatter":{},"headers":[],"relativePath":"计算机知识/数据结构/非线性数据结构/树形结构/字典树 (Trie Tree)/index.md","filePath":"计算机知识/数据结构/非线性数据结构/树形结构/字典树 (Trie Tree)/index.md","lastUpdated":1716891854000}'),n={name:"计算机知识/数据结构/非线性数据结构/树形结构/字典树 (Trie Tree)/index.md"},l=e("h1",{id:"字典树-trie-tree",tabindex:"-1"},[i("字典树 (Trie Tree) "),e("a",{class:"header-anchor",href:"#字典树-trie-tree","aria-label":'Permalink to "字典树 (Trie Tree)"'},"​")],-1),o=e("p",null,"字典树（Trie Tree），也被称为前缀树，是用于快速检索字符串集合中元素的一种数据结构。它的特点是高效的单词存储和检索速度，可以用于实现搜索引擎的词频统计、拼写检查、IP 地址检索等功能。",-1),s=e("p",null,"字典树的结构如下：",-1),d=e("ol",null,[e("li",null,"每个节点代表一个字符。"),e("li",null,"从根节点出发，到达任何一个字符节点，都代表了一个词的前缀。"),e("li",null,"从根节点到某个节点的路径上经过的字符连接起来，即为该节点对应的词。"),e("li",null,"字典树中每个节点的子节点都有一个特定的字符与之对应，一般按照字典序（或者特定顺序）排列。")],-1),c=[l,o,s,d];function _(T,p,h,u,m,f){return a(),r("div",null,c)}const $=t(n,[["render",_]]);export{P as __pageData,$ as default};
