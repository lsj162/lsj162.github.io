import{_ as t,c as a,o,a5 as s}from"./chunks/framework.DALfHeHd.js";const S=JSON.parse('{"title":"栈（Stack）","description":"","frontmatter":{},"headers":[],"relativePath":"计算机知识/数据结构/线性数据结构/栈 (Stack)/栈 (Stack).md","filePath":"计算机知识/数据结构/线性数据结构/栈 (Stack)/栈 (Stack).md","lastUpdated":1716891854000}'),e={name:"计算机知识/数据结构/线性数据结构/栈 (Stack)/栈 (Stack).md"},r=s('<h1 id="栈-stack" tabindex="-1">栈（Stack） <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈（Stack）&quot;">​</a></h1><p>栈（Stack）是一种操作受限的线性表，其特点是在一端进行插入和删除操作，这一端被称为栈顶（Top）。栈的后进先出（LIFO，Last In First Out）原则使得后插入的元素必须先被删除。</p><p>常见的栈操作有：</p><ol><li><p><strong>压栈（Push）</strong>：在栈顶添加一个元素。通常，它包括将元素放置在栈顶的顶部，即将元素放在之前栈顶元素的上方。</p></li><li><p><strong>弹栈（Pop）</strong>：从栈顶删除一个元素。根据后进先出的原则，栈顶的元素必须是最后一个进入的元素，因此，这个操作通常移除并返回栈顶的元素。</p></li><li><p><strong>查看栈顶元素（Peek/TOP）</strong>：查看栈顶元素，但不删除它。</p></li><li><p><strong>检查栈是否为空（IsEmpty）</strong>：判断栈中是否没有元素。</p></li><li><p><strong>检查栈是否已满（IsFull）</strong>：判断栈是否已达到其容量上限。</p></li></ol><p>栈的应用非常广泛，包括但不限于：</p><ul><li><strong>递归调用</strong>：当函数调用自身时，需要一种方式来保存函数的状态和局部变量，栈在这些情况下很有用。</li><li><strong>后缀表达式（Reverse Polish Notation）</strong>：栈可以用来处理后缀表达式（如计算数学表达式）。</li><li><strong>括号匹配</strong>：栈可以用来检查字符串中的括号是否正确匹配。</li><li><strong>历史记录</strong>：在 Web 浏览器中，后退按钮使用栈来存储你访问过的网页的历史记录。</li></ul><p>在浏览器启动时，它会创建一个进程来管理程序的运行。这个进程会创建两个重要的内存区域：堆（Heap）和栈（Stack）。</p><p>栈通常可以用数组或链表实现。在数组实现中，栈顶可以是一个指针，指向数组的最后一个元素的下一个位置，但在一些编程语言中，由于数组通常从 0 开始计数，栈顶可能直接就是数组的最后一个元素的索引。在链表实现中，栈顶通常是一个指向链表最后一个节点的指针。无论使用哪种数据结构，栈的实现都必须保证操作的时间复杂度为 O(1)，即常数时间。</p>',8),n=[r];function l(i,p,c,_,g,d){return o(),a("div",null,n)}const h=t(e,[["render",l]]);export{S as __pageData,h as default};
