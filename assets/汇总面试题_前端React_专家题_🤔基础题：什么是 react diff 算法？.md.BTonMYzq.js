import{_ as t,c as a,o as e,a5 as i}from"./chunks/framework.-E9IboRH.js";const R=JSON.parse('{"title":"基础题：什么是 react diff 算法？","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/前端React/专家题/🤔基础题：什么是 react diff 算法？.md","filePath":"汇总面试题/前端React/专家题/🤔基础题：什么是 react diff 算法？.md"}'),l={name:"汇总面试题/前端React/专家题/🤔基础题：什么是 react diff 算法？.md"},r=i('<h1 id="基础题-什么是-react-diff-算法" tabindex="-1">基础题：什么是 react diff 算法？ <a class="header-anchor" href="#基础题-什么是-react-diff-算法" aria-label="Permalink to &quot;基础题：什么是 react diff 算法？&quot;">​</a></h1><p>React 的 diff 算法是一种用于比较 Virtual DOM 树的算法</p><h2 id="react-中的完整更新流程可以概括为以下几个步骤" tabindex="-1">React 中的完整更新流程可以概括为以下几个步骤： <a class="header-anchor" href="#react-中的完整更新流程可以概括为以下几个步骤" aria-label="Permalink to &quot;React 中的完整更新流程可以概括为以下几个步骤：&quot;">​</a></h2><ol><li><p><strong>触发更新</strong>：</p><ul><li>当组件的状态（state）发生变化或者父组件向子组件传递的属性（props）发生变化时，React 会触发更新过程。</li></ul></li><li><p><strong>生成新的 Virtual DOM 树</strong>：</p><ul><li>React 会调用组件的 render() 方法生成新的 Virtual DOM 树，该树描述了组件的当前状态和结构。</li></ul></li><li><p><strong>Diff 算法比较</strong>：</p><ul><li><p>React 将新的 Virtual DOM 树与旧的 Virtual DOM 树进行比较，找出两者之间的差异。</p><ul><li><p>组件比较：React 会比较类型，以确定是否相同。如果组件类型相同，则继续比较组件的属性（props）和子组件。如果组件类型不同，则直接卸载旧组件，并挂载新组件。</p></li><li><p>节点比较：对于每对相同位置的节点，React 会比较它们的类型和属性。如果节点类型和属性都相同，则认为它们是相同的节点。如果节点类型或属性不同，则将旧节点替换为新节点。</p></li><li><p>列表项比较：在比较列表时，React 会使用列表项的唯一标识（key）来确定哪些项被添加、移动或删除。</p></li></ul></li></ul></li><li><p><strong>应用更新</strong>：</p><ul><li>React 将更新后的操作应用到真实 DOM 上，更新页面。</li><li>React 会尽可能地优化更新操作，例如批量更新、使用 key 来进行优化等。</li></ul></li><li><p><strong>生命周期方法</strong>：</p><ul><li>在更新过程中，React 还会调用相应的生命周期方法，例如 componentDidUpdate()，以便开发者可以在组件更新完成后执行一些额外的操作。</li></ul></li></ol><p>通过以上完整的更新流程，React 能够高效地管理组件状态和页面渲染，提供了一种方便且性能良好的方式来构建交互式的用户界面。</p>',5),c=[r];function o(_,p,s,n,d,f){return e(),a("div",null,c)}const h=t(l,[["render",o]]);export{R as __pageData,h as default};
