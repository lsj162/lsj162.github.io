import{_ as t,c as o,o as r,a5 as a}from"./chunks/framework.-E9IboRH.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/前端JavaScript/基础题/基础题：什么是函数式编程？.md","filePath":"汇总面试题/前端JavaScript/基础题/基础题：什么是函数式编程？.md"}'),n={name:"汇总面试题/前端JavaScript/基础题/基础题：什么是函数式编程？.md"},_=a("<p>函数式编程（Functional Programming）是一种编程范式，它将计算视为数学函数的求值，并且避免了状态改变和可变数据。函数式编程强调使用纯函数（Pure Functions）和不可变数据（Immutable Data），并倡导使用函数组合、高阶函数和递归等技术来构建程序。</p><p>函数式编程的主要特点包括：</p><ol><li><p><strong>纯函数</strong>：纯函数是指函数的输出仅依赖于其输入，而不依赖于外部状态或副作用。纯函数不会修改传入的参数，也不会修改全局变量或外部状态，它们总是返回相同的输出给定相同的输入。</p></li><li><p><strong>不可变数据</strong>：不可变数据是指一旦创建就不能被修改的数据结构。在函数式编程中，不可变数据可以帮助避免副作用，简化代码的理解和调试，并且支持并行计算。</p></li><li><p><strong>函数组合</strong>：函数组合是指将多个函数组合成一个函数的技术。在函数式编程中，函数是一等公民，可以作为参数传递给其他函数，也可以作为返回值返回给调用者，因此可以轻松地进行函数组合。</p></li><li><p><strong>高阶函数</strong>：高阶函数是指接受一个或多个函数作为参数，并/或者返回一个函数的函数。高阶函数可以用来抽象通用的模式，使代码更具表现力和灵活性。</p></li><li><p><strong>递归</strong>：递归是一种定义在自身基础上的函数的技术。在函数式编程中，递归通常用于解决问题，因为它可以简洁地表达很多算法和数据结构。</p></li></ol><p>函数式编程通常具有以下优势：</p><ul><li><strong>可靠性</strong>：由于函数式编程强调不可变性和纯函数，因此代码更加可靠和容易测试。</li><li><strong>并发性</strong>：函数式编程的不可变性和纯函数特性使得并发编程更容易，因为没有共享的可变状态。</li><li><strong>表达力</strong>：函数式编程提供了丰富的高阶函数、函数组合和递归等工具，使得代码更具表现力和简洁性。</li></ul><p>函数式编程在现代编程中越来越受欢迎，许多编程语言都提供了对函数式编程的支持，如 JavaScript、Python、Scala、Haskell 等。</p>",6),s=[_];function i(e,l,p,c,g,d){return r(),o("div",null,s)}const S=t(n,[["render",i]]);export{u as __pageData,S as default};
