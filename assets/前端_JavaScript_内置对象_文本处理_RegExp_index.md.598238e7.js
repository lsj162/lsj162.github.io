import{_ as s,o as a,c as p,S as o}from"./chunks/framework.2524ba1c.js";const A=JSON.parse('{"title":"RegExp(正则表达式)","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/内置对象/文本处理/RegExp/index.md","filePath":"前端/JavaScript/内置对象/文本处理/RegExp/index.md"}'),e={name:"前端/JavaScript/内置对象/文本处理/RegExp/index.md"},n=o(`<h1 id="regexp-正则表达式" tabindex="-1">RegExp(正则表达式) <a class="header-anchor" href="#regexp-正则表达式" aria-label="Permalink to &quot;RegExp(正则表达式)&quot;">​</a></h1><p>RegExp 对象用于将文本与一个模式匹配。</p><p>以下三种表达式都会创建相同的正则表达式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">ab</span><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//字面量形式</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ab+c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 首个参数为字符串模式的构造函数</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">ab</span><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 首个参数为常规字面量的构造函数</span></span></code></pre></div><h2 id="常见的实例方法" tabindex="-1">常见的实例方法 <a class="header-anchor" href="#常见的实例方法" aria-label="Permalink to &quot;常见的实例方法&quot;">​</a></h2><p>RegExp.prototype.exec() 在该字符串中执行匹配项的搜索。</p><p>RegExp.prototype.test() 该正则在字符串里是否有匹配。</p><p>RegExp.prototype[@@match]() 对给定字符串执行匹配并返回匹配结果。</p><p>RegExp.prototype[@@matchAll]() 对给定字符串执行匹配，返回所有匹配结果。</p><p>RegExp.prototype[@@replace]() 给定新的子串，替换所有匹配结果。</p><p>RegExp.prototype[@@search]() 在给定字符串中搜索匹配项，并返回在字符串中找到字符索引。</p><p>RegExp.prototype[@@split]() 通过将给定字符串拆分为子字符串，并返回字符串形成的数组。</p>`,12),t=[n];function l(c,r,D,y,i,F){return a(),p("div",null,t)}const d=s(e,[["render",l]]);export{A as __pageData,d as default};
