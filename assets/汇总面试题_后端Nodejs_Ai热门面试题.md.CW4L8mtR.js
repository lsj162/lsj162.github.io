import{_ as e,c as a,o,a5 as t}from"./chunks/framework.-E9IboRH.js";const p=JSON.parse('{"title":"什么是 Node.js？它的主要特点是什么？🚮","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/后端Nodejs/Ai热门面试题.md","filePath":"汇总面试题/后端Nodejs/Ai热门面试题.md"}'),r={name:"汇总面试题/后端Nodejs/Ai热门面试题.md"},s=t('<h1 id="什么是-node-js-它的主要特点是什么-🚮" tabindex="-1">什么是 Node.js？它的主要特点是什么？🚮 <a class="header-anchor" href="#什么是-node-js-它的主要特点是什么-🚮" aria-label="Permalink to &quot;什么是 Node.js？它的主要特点是什么？🚮&quot;">​</a></h1><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境； 非阻塞式 I/O 操作；单线程事件循环；</p><h1 id="什么是非阻塞-i-o-🚮" tabindex="-1">什么是非阻塞 I/O？🚮 <a class="header-anchor" href="#什么是非阻塞-i-o-🚮" aria-label="Permalink to &quot;什么是非阻塞 I/O？🚮&quot;">​</a></h1><p>非阻塞式 I/O 采用异步非阻塞，然后通过事件或者回调函数的方式来处理 I/O 操作的结果。 传统阻塞等待完成；</p><h1 id="buffer-与-streams-区别" tabindex="-1">Buffer 与 Streams 区别？ <a class="header-anchor" href="#buffer-与-streams-区别" aria-label="Permalink to &quot;Buffer 与 Streams 区别？&quot;">​</a></h1><p>Buffer 在处理数据时通常需要加载整个数据集到内存中，Streams 允许在处理数据时逐个分块地读取和写入；</p><h1 id="如何在-node-js-中实现缓存机制" tabindex="-1">如何在 Node.js 中实现缓存机制？ <a class="header-anchor" href="#如何在-node-js-中实现缓存机制" aria-label="Permalink to &quot;如何在 Node.js 中实现缓存机制？&quot;">​</a></h1><p>使用 Node.js 内置的缓存模块，比如 memory-cache、lru-cache 等；</p>',8),d=[s];function i(n,c,_,h,l,f){return o(),a("div",null,d)}const u=e(r,[["render",i]]);export{p as __pageData,u as default};
