import{_ as s,o as n,c as a,S as l}from"./chunks/framework.2524ba1c.js";const i=JSON.parse('{"title":"组合使用构造函数模式和原型模式","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/面向对象编程/创建对象/4. 组合使用构造函数模式和原型模式/index.md","filePath":"前端/JavaScript/面向对象编程/创建对象/4. 组合使用构造函数模式和原型模式/index.md"}'),o={name:"前端/JavaScript/面向对象编程/创建对象/4. 组合使用构造函数模式和原型模式/index.md"},p=l(`<h1 id="组合使用构造函数模式和原型模式" tabindex="-1">组合使用构造函数模式和原型模式 <a class="header-anchor" href="#组合使用构造函数模式和原型模式" aria-label="Permalink to &quot;组合使用构造函数模式和原型模式&quot;">​</a></h1><p>这是使用最为广泛、认同度最高的一种创建自定义类型的方法。它可以解决上面那些模式的缺点</p><p>使用此模式可以让每个实例都会有自己的一份实例属性副本，但同时又共享着对方法的引用</p><p>这样的话，即使实例属性修改引用类型的值，也不会影响其他实例的属性值了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">friends</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [‘</span><span style="color:#A6ACCD;">Shelby</span><span style="color:#F07178;">’</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ‘</span><span style="color:#A6ACCD;">Court</span><span style="color:#F07178;">’]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">friends</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(‘Van’)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">friends)  </span><span style="color:#676E95;font-style:italic;">//[“Shelby”, “Court”, “Van”]</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">friends) </span><span style="color:#676E95;font-style:italic;">// [“Shelby”, “Court”]</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">friends </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> person2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">friends) </span><span style="color:#676E95;font-style:italic;">//false</span></span></code></pre></div>`,5),e=[p];function t(c,r,y,D,A,F){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{i as __pageData,d as default};
