import{_ as a,c as e,o,a5 as t}from"./chunks/framework.-E9IboRH.js";const S=JSON.parse('{"title":"1. ES6 相对于 ES5 有哪些新特性？","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/前端EcmaScript/Ai热门面试题.md","filePath":"汇总面试题/前端EcmaScript/Ai热门面试题.md"}'),r={name:"汇总面试题/前端EcmaScript/Ai热门面试题.md"},l=t('<h1 id="_1-es6-相对于-es5-有哪些新特性" tabindex="-1">1. ES6 相对于 ES5 有哪些新特性？ <a class="header-anchor" href="#_1-es6-相对于-es5-有哪些新特性" aria-label="Permalink to &quot;1. ES6 相对于 ES5 有哪些新特性？&quot;">​</a></h1><p>ECMAScript 6（ES6），也被称为 ECMAScript 2015，引入了许多新的特性和语法糖，以提高 JavaScript 语言的表达力和开发效率。以下是 ES6 相对于 ES5 的一些主要新特性：</p><ol><li><p><strong>let 和 const 关键字：</strong> 引入了块级作用域的<code>let</code>和不可重新赋值的<code>const</code>。</p></li><li><p><strong>箭头函数：</strong> 提供了更简洁的函数声明语法，同时修复了<code>this</code>在函数中的指向问题。</p></li><li><p><strong>模板字符串：</strong> 允许多行字符串和内嵌表达式，提高了字符串的可读性和拼接的便捷性。</p></li><li><p><strong>解构赋值：</strong> 允许从数组或对象中提取值，以一种简洁的语法进行赋值。</p></li><li><p><strong>Promise 对象：</strong> 引入了 Promise，提供了更好的异步编程解决方案，使得回调地狱（Callback Hell）更容易管理。</p></li><li><p><strong>async/await：</strong> 简化了异步代码的编写，使其看起来更像同步代码，提高了可读性。</p></li><li><p><strong>Generator 函数：</strong> 允许在函数执行过程中暂停和恢复，可以用于实现惰性计算等特性。</p></li><li><p><strong>class 和继承：</strong> 引入了类和类继承的语法糖，更符合面向对象编程的习惯。</p></li><li><p><strong>模块化：</strong> 引入了原生的模块化系统，使得代码可以更好地组织和重用。</p></li><li><p><strong>新的数据类型和结构：</strong> 包括<code>Map</code>、<code>Set</code>、<code>Symbol</code>等新的数据类型和数据结构。</p></li><li><p><strong>Proxy 和 Reflect：</strong> 提供了元编程的能力，可以拦截并修改对象的基本操作。</p></li><li><p><strong>Default 参数：</strong> 允许为函数参数设置默认值，减少了在函数内部进行参数默认值检查的需求。</p></li><li><p><strong>Rest 和 Spread 操作符：</strong> 引入了<code>...</code>操作符，用于函数参数中的剩余参数和数组/对象的展开操作。</p></li><li><p><strong>TypedArray：</strong> 提供了处理二进制数据的能力。</p></li></ol><h1 id="什么是模板字符串-🚮" tabindex="-1">什么是模板字符串？🚮 <a class="header-anchor" href="#什么是模板字符串-🚮" aria-label="Permalink to &quot;什么是模板字符串？🚮&quot;">​</a></h1><p>模板字符串是新增的字符串语法，更清晰的字符串拼接，变量插值，多行字符串；</p><h1 id="什么是解构赋值-🚮" tabindex="-1">什么是解构赋值？🚮 <a class="header-anchor" href="#什么是解构赋值-🚮" aria-label="Permalink to &quot;什么是解构赋值？🚮&quot;">​</a></h1><p>从数组或对象中提取数据并赋值给变量的语法</p><h1 id="什么是剩余参数和展开运算符-🚮" tabindex="-1">什么是剩余参数和展开运算符？🚮 <a class="header-anchor" href="#什么是剩余参数和展开运算符-🚮" aria-label="Permalink to &quot;什么是剩余参数和展开运算符？🚮&quot;">​</a></h1><p>函数定义中使用的语法，...numbers 一般放在尾部，返回数组； 运算符...用于展开数组或对象，将它们的元素或属性插入到另一个数组或对象中。</p><h1 id="let-和-const-的暂时性死区是什么-🚮" tabindex="-1">let 和 const 的暂时性死区是什么？🚮 <a class="header-anchor" href="#let-和-const-的暂时性死区是什么-🚮" aria-label="Permalink to &quot;let 和 const 的暂时性死区是什么？🚮&quot;">​</a></h1><p>初始化之前无法访问。</p><h1 id="es6-中的-for-of-循环和-for-in-循环的区别-🚮" tabindex="-1">ES6 中的 for...of 循环和 for...in 循环的区别？🚮 <a class="header-anchor" href="#es6-中的-for-of-循环和-for-in-循环的区别-🚮" aria-label="Permalink to &quot;ES6 中的 for...of 循环和 for...in 循环的区别？🚮&quot;">​</a></h1><p>for...of 循环比 for...in 循环性能更好，因为它不需要查找对象的原型链，并且可以避免遍历对象的原型属性。</p><h1 id="es6-中的模块系统-🚮" tabindex="-1">ES6 中的模块系统？🚮 <a class="header-anchor" href="#es6-中的模块系统-🚮" aria-label="Permalink to &quot;ES6 中的模块系统？🚮&quot;">​</a></h1><p>模块文件，文件路径即为模块名；动态 import()加载； 在 ES6 中，模块系统引入了两种导出方式：默认导出（Default Export）和命名导出（Named Export）。</p><h1 id="解释-es6-中的-class-字段和私有字段-🚮" tabindex="-1">解释 ES6 中的 class 字段和私有字段？🚮 <a class="header-anchor" href="#解释-es6-中的-class-字段和私有字段-🚮" aria-label="Permalink to &quot;解释 ES6 中的 class 字段和私有字段？🚮&quot;">​</a></h1><p>Class 字段是指在类中直接声明的实例属性，使用 extends 关键字来实现类的继承。私有字段以#开头进行声明</p><h1 id="async-await-是什么-它们解决了什么问题-🚮" tabindex="-1">async/await 是什么？它们解决了什么问题？🚮 <a class="header-anchor" href="#async-await-是什么-它们解决了什么问题-🚮" aria-label="Permalink to &quot;async/await 是什么？它们解决了什么问题？🚮&quot;">​</a></h1><p>异步编程方式；回调地狱，错误处理，顺序执行，异步操作组合；</p><h1 id="什么是-symbol-类型-以及它有什么用途" tabindex="-1">什么是 Symbol 类型，以及它有什么用途？ <a class="header-anchor" href="#什么是-symbol-类型-以及它有什么用途" aria-label="Permalink to &quot;什么是 Symbol 类型，以及它有什么用途？&quot;">​</a></h1><p>Symbol 是 ES6 引入的一种新的基本数据类型，用于表示唯一的标识符。</p><p>Symbol 作为字典的键：Symbol 作为对象的属性名，不会被 for...in 循环、Object.keys()、Object.getOwnPropertyNames()等方法遍历到，从而保证了数据的安全性和语义化。</p><h1 id="解释箭头函数的特点及其与传统函数表达式的区别" tabindex="-1">解释箭头函数的特点及其与传统函数表达式的区别？ <a class="header-anchor" href="#解释箭头函数的特点及其与传统函数表达式的区别" aria-label="Permalink to &quot;解释箭头函数的特点及其与传统函数表达式的区别？&quot;">​</a></h1><ol><li>语法简洁</li><li>不会创建自己的 this</li><li>没有 arguments 对象</li><li>不能作为构造函数，并且没有 prototype 属性。</li><li>没有 super 关键字</li></ol>',24),i=[l];function s(n,c,p,d,h,f){return o(),e("div",null,i)}const b=a(r,[["render",s]]);export{S as __pageData,b as default};
