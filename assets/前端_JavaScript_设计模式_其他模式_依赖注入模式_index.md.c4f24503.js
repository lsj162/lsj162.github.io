import{_ as s,o as a,c as n,S as l}from"./chunks/framework.2524ba1c.js";const C=JSON.parse('{"title":"依赖注入模式（Dependency Injection Pattern）","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JavaScript/设计模式/其他模式/依赖注入模式/index.md","filePath":"前端/JavaScript/设计模式/其他模式/依赖注入模式/index.md"}'),p={name:"前端/JavaScript/设计模式/其他模式/依赖注入模式/index.md"},o=l(`<h1 id="依赖注入模式-dependency-injection-pattern" tabindex="-1">依赖注入模式（Dependency Injection Pattern） <a class="header-anchor" href="#依赖注入模式-dependency-injection-pattern" aria-label="Permalink to &quot;依赖注入模式（Dependency Injection Pattern）&quot;">​</a></h1><p>依赖注入模式（Dependency Injection Pattern）是一种设计模式，用于管理一个对象对其依赖项的引入。在依赖注入中，对象的依赖关系不是在对象内部创建或硬编码的，而是通过外部注入的方式提供给对象。这有助于降低对象之间的耦合度，增加代码的可测试性和可维护性。</p><p>依赖注入模式的关键思想是将依赖关系从对象内部移到对象外部，通常通过构造函数、方法参数或属性来实现。这样，对象不需要自己创建或了解其依赖项，而是依赖项被外部组件提供。这种模式有助于实现松耦合，使代码更易于测试和扩展。</p><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>测试：依赖注入允许将模拟或替代对象注入到被测试对象中，以便进行单元测试。</p><p>可插拔性：依赖注入可以使系统更易于扩展和更换组件，而无需修改现有代码。</p><p>解耦：通过依赖注入，可以将依赖关系从一个对象解耦，使代码更加灵活和可维护。</p><p>配置：依赖注入可以用于将配置信息注入到对象中，以便根据不同配置使用相同的组件。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 依赖注入的例子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 服务提供者</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DatabaseService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">query</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 模拟查询数据库的操作</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Executing query: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Result 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Result 2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Result 3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用服务的客户端</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DataProcessor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">databaseService</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">databaseService</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">databaseService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">processData</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">query</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SELECT * FROM data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">results</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">databaseService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">query</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Processing results:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">results</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 客户端代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> databaseService </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DatabaseService</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dataProcessor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DataProcessor</span><span style="color:#A6ACCD;">(databaseService)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">dataProcessor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">processData</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在上面的示例中，我们有一个 DatabaseService 类，它代表一个数据库服务提供者，提供了 query 方法来查询数据库。然后，我们有一个 DataProcessor 类，它接受 databaseService 作为构造函数参数，并在 processData 方法中使用它来执行查询。</p><p>客户端代码创建了 DatabaseService 实例和 DataProcessor 实例，并通过构造函数参数将 DatabaseService 依赖注入到 DataProcessor 中。这种方式使 DataProcessor 依赖于抽象的 DatabaseService 接口，从而降低了耦合度，提高了可测试性。</p><p>在更大的应用程序中，依赖注入模式可以用于管理各种依赖项，包括数据库连接、日志记录、配置等，以使代码更加模块化、可维护和可测试。</p>`,13),e=[o];function t(c,r,D,y,F,i){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
