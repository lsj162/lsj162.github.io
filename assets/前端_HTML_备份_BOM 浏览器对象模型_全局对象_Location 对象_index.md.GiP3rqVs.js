import{_ as a,c as o,o as t,a6 as n}from"./chunks/framework.DwCPU-X7.js";const m=JSON.parse('{"title":"Location","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/HTML/备份/BOM 浏览器对象模型/全局对象/Location 对象/index.md","filePath":"前端/HTML/备份/BOM 浏览器对象模型/全局对象/Location 对象/index.md"}'),e={name:"前端/HTML/备份/BOM 浏览器对象模型/全局对象/Location 对象/index.md"},i=n('<h1 id="location" tabindex="-1">Location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;Location&quot;">​</a></h1><p>Location 接口表示其链接到的对象的位置（URL）。所做的修改反映在与之相关的对象上。 Document 和 Window 接口都有这样一个链接的 Location，分别通过 Document.location 和 Window.location 访问。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location);</span></span></code></pre></div><h2 id="常见的属性" tabindex="-1">常见的属性 <a class="header-anchor" href="#常见的属性" aria-label="Permalink to &quot;常见的属性&quot;">​</a></h2><p>Location 接口不继承任何属性，但是实现了那些来自 URLUtils 的属性。</p><h3 id="location-href" tabindex="-1">Location.href <a class="header-anchor" href="#location-href" aria-label="Permalink to &quot;Location.href&quot;">​</a></h3><p>包含整个 URL 的一个 DOMString</p><h3 id="location-protocol-en-us" tabindex="-1">Location.protocol (en-US) <a class="header-anchor" href="#location-protocol-en-us" aria-label="Permalink to &quot;Location.protocol (en-US)&quot;">​</a></h3><p>包含 URL 对应协议的一个 DOMString，最后有一个&quot;:&quot;。</p><h3 id="location-host" tabindex="-1">Location.host <a class="header-anchor" href="#location-host" aria-label="Permalink to &quot;Location.host&quot;">​</a></h3><p>包含了域名的一个 DOMString，可能在该串最后带有一个&quot;:&quot;并跟上 URL 的端口号。</p><h3 id="location-hostname" tabindex="-1">Location.hostname <a class="header-anchor" href="#location-hostname" aria-label="Permalink to &quot;Location.hostname&quot;">​</a></h3><p>包含 URL 域名的一个 DOMString。</p><h3 id="location-port-en-us" tabindex="-1">Location.port (en-US) <a class="header-anchor" href="#location-port-en-us" aria-label="Permalink to &quot;Location.port (en-US)&quot;">​</a></h3><p>包含端口号的一个 DOMString。</p><h3 id="location-pathname-en-us" tabindex="-1">Location.pathname (en-US) <a class="header-anchor" href="#location-pathname-en-us" aria-label="Permalink to &quot;Location.pathname (en-US)&quot;">​</a></h3><p>包含 URL 中路径部分的一个 DOMString，开头有一个 /。</p><h3 id="location-search" tabindex="-1">Location.search <a class="header-anchor" href="#location-search" aria-label="Permalink to &quot;Location.search&quot;">​</a></h3><p>包含 URL 参数的一个 DOMString，开头有一个“?”。</p><h3 id="location-hash" tabindex="-1">Location.hash <a class="header-anchor" href="#location-hash" aria-label="Permalink to &quot;Location.hash&quot;">​</a></h3><p>包含块标识符的 DOMString，开头有一个 #。</p><h3 id="location-username-en-us" tabindex="-1">Location.username (en-US) <a class="header-anchor" href="#location-username-en-us" aria-label="Permalink to &quot;Location.username (en-US)&quot;">​</a></h3><p>包含 URL 中域名前的用户名的一个 DOMString。</p><h3 id="location-password-en-us" tabindex="-1">Location.password (en-US) <a class="header-anchor" href="#location-password-en-us" aria-label="Permalink to &quot;Location.password (en-US)&quot;">​</a></h3><p>包含 URL 域名前的密码的一个 DOMString。</p><h3 id="location-origin-en-us-只读" tabindex="-1">Location.origin (en-US) 只读 <a class="header-anchor" href="#location-origin-en-us-只读" aria-label="Permalink to &quot;Location.origin (en-US) 只读&quot;">​</a></h3><p>包含页面来源的域名的标准形式 DOMString。</p><h2 id="常见的方法" tabindex="-1">常见的方法 <a class="header-anchor" href="#常见的方法" aria-label="Permalink to &quot;常见的方法&quot;">​</a></h2><h3 id="location-assign" tabindex="-1">Location.assign() <a class="header-anchor" href="#location-assign" aria-label="Permalink to &quot;Location.assign()&quot;">​</a></h3><p>加载给定 URL 的内容资源到这个 Location 对象所关联的对象上。</p><h3 id="location-reload" tabindex="-1">Location.reload() <a class="header-anchor" href="#location-reload" aria-label="Permalink to &quot;Location.reload()&quot;">​</a></h3><p>重新加载来自当前 URL 的资源。他有一个特殊的可选参数，类型为 Boolean (en-US)，该参数为 true 时会导致该方法引发的刷新一定会从服务器上加载数据。如果是 false 或没有制定这个参数，浏览器可能从缓存当中加载页面。</p><h3 id="location-replace" tabindex="-1">Location.replace() <a class="header-anchor" href="#location-replace" aria-label="Permalink to &quot;Location.replace()&quot;">​</a></h3><p>用给定的 URL 替换掉当前的资源。与 assign() 方法不同的是用 replace()替换的新页面不会被保存在会话的历史 History 中，这意味着用户将不能用后退按钮转到该页面。</p><h3 id="location-tostring" tabindex="-1">Location.toString() <a class="header-anchor" href="#location-tostring" aria-label="Permalink to &quot;Location.toString()&quot;">​</a></h3><p>返回一个 DOMString，包含整个 URL。它和读取 URLUtils.href 的效果相同。但是用它是不能够修改 Location 的值的。</p>',36),r=[i];function c(l,s,h,d,p,u){return t(),o("div",null,r)}const b=a(e,[["render",c]]);export{m as __pageData,b as default};
