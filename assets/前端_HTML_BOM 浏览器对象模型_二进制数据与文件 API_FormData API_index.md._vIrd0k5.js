import{_ as a,o as t,c as e,R as r}from"./chunks/framework.FQOLfzW2.js";const u=JSON.parse('{"title":"FormData","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/HTML/BOM 浏览器对象模型/二进制数据与文件 API/FormData API/index.md","filePath":"前端/HTML/BOM 浏览器对象模型/二进制数据与文件 API/FormData API/index.md"}'),o={name:"前端/HTML/BOM 浏览器对象模型/二进制数据与文件 API/FormData API/index.md"},d=r('<h1 id="formdata" tabindex="-1">FormData <a class="header-anchor" href="#formdata" aria-label="Permalink to &quot;FormData&quot;">​</a></h1><p>FormData 接口提供了一种表示表单数据的键值对 key/value 的构造方式，并且可以轻松的将数据通过 XMLHttpRequest.send() 方法发送出去，本接口和此方法都相当简单直接。如果送出时的编码类型被设为 &quot;multipart/form-data&quot;，它会使用和表单一样的格式。</p><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><h3 id="formdata-1" tabindex="-1">FormData() <a class="header-anchor" href="#formdata-1" aria-label="Permalink to &quot;FormData()&quot;">​</a></h3><p>创建一个新的 FormData 对象。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="formdata-append" tabindex="-1">FormData.append() <a class="header-anchor" href="#formdata-append" aria-label="Permalink to &quot;FormData.append()&quot;">​</a></h3><p>向 FormData 中添加新的属性值，FormData 对应的属性值存在也不会覆盖原值，而是新增一个值，如果属性不存在则新增一项属性值。</p><h3 id="formdata-delete" tabindex="-1">FormData.delete() <a class="header-anchor" href="#formdata-delete" aria-label="Permalink to &quot;FormData.delete()&quot;">​</a></h3><p>从 FormData 对象里面删除一个键值对。</p><h3 id="formdata-entries" tabindex="-1">FormData.entries() <a class="header-anchor" href="#formdata-entries" aria-label="Permalink to &quot;FormData.entries()&quot;">​</a></h3><p>返回一个包含所有键值对的 iterator 对象。</p><h3 id="formdata-get" tabindex="-1">FormData.get() <a class="header-anchor" href="#formdata-get" aria-label="Permalink to &quot;FormData.get()&quot;">​</a></h3><p>返回在 FormData 对象中与给定键关联的第一个值。</p><h3 id="formdata-getall" tabindex="-1">FormData.getAll() <a class="header-anchor" href="#formdata-getall" aria-label="Permalink to &quot;FormData.getAll()&quot;">​</a></h3><p>返回一个包含 FormData 对象中与给定键关联的所有值的数组。</p><h3 id="formdata-has" tabindex="-1">FormData.has() <a class="header-anchor" href="#formdata-has" aria-label="Permalink to &quot;FormData.has()&quot;">​</a></h3><p>返回一个布尔值表明 FormData 对象是否包含某些键。</p><h3 id="formdata-keys" tabindex="-1">FormData.keys() <a class="header-anchor" href="#formdata-keys" aria-label="Permalink to &quot;FormData.keys()&quot;">​</a></h3><p>返回一个包含所有键的 iterator 对象。</p><h3 id="formdata-set" tabindex="-1">FormData.set() <a class="header-anchor" href="#formdata-set" aria-label="Permalink to &quot;FormData.set()&quot;">​</a></h3><p>给 FormData 设置属性值，如果 FormData 对应的属性值存在则覆盖原值，否则新增一项属性值。</p><h3 id="formdata-values" tabindex="-1">FormData.values() <a class="header-anchor" href="#formdata-values" aria-label="Permalink to &quot;FormData.values()&quot;">​</a></h3><p>返回一个包含所有值的 iterator 对象。</p>',24),m=[d];function l(i,h,n,s,c,f){return t(),e("div",null,m)}const D=a(o,[["render",l]]);export{u as __pageData,D as default};
