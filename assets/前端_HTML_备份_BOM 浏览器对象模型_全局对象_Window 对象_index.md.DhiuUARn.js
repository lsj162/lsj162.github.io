import{_ as l,c as i,o as e,a6 as o}from"./chunks/framework.DwCPU-X7.js";const W=JSON.parse('{"title":"Window","description":"","frontmatter":{},"headers":[],"relativePath":"前端/HTML/备份/BOM 浏览器对象模型/全局对象/Window 对象/index.md","filePath":"前端/HTML/备份/BOM 浏览器对象模型/全局对象/Window 对象/index.md","lastUpdated":1712399324000}'),a={name:"前端/HTML/备份/BOM 浏览器对象模型/全局对象/Window 对象/index.md"},u=o('<h1 id="window" tabindex="-1">Window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;Window&quot;">​</a></h1><p>window 对象表示一个包含 DOM 文档的窗口，其 document 属性指向窗口中载入的 DOM 文档 。</p><p>使用 document.defaultView 属性可以获取指定文档所在窗口。</p><p>代表了脚本正在运行的窗口的 window 全局变量，被暴露给 Javascript 代码。</p><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><p>本接口从 EventTarget 接口继承属性。</p><p>注意，对象类型的属性（例如：覆盖内建元素的原型）被列于下面单独的小节之中。</p><ul><li><p>Window.caches <code>只读</code></p><ul><li>返回与当前环境相关的 CacheStorage 对象。这个对象可以实现一些功能，如存储供离线使用的资源，以及对请求生成自定义响应。</li></ul></li><li><p>Window.clientInformation <code>只读</code></p><ul><li>Window.navigator 对象的别名。</li></ul></li><li><p>Window.closed <code>只读</code></p><ul><li>此属性表示当前窗口是否关闭。</li></ul></li><li><p>Window.console <code>只读</code></p><ul><li>返回对 console 对象的引用，该对象提供对浏览器调试控制台的访问。</li></ul></li><li><p>Window.crypto <code>只读</code></p><ul><li>返回浏览器的 crypto 对象。</li></ul></li><li><p>Window.customElements <code>只读</code></p><ul><li>返回对 CustomElementRegistry 对象的引用，该对象可用于注册新的自定义元素并获取之前注册的自定义元素- 的信息。</li></ul></li><li><p>Window.devicePixelRatio <code>只读</code></p><ul><li>返回当前显示器中物理像素和设备独立像素之间的比率。</li></ul></li><li><p>Window.document <code>只读</code></p><ul><li>返回对 window 所包含的文档的引用。</li></ul></li><li><p>Window.frameElement <code>只读</code></p><ul><li>返回窗口被嵌入的元素，如果窗口没有被嵌入，则返回空。</li></ul></li><li><p>Window.frames <code>只读</code></p><ul><li>返回当前窗口中的子框架（subframe）形成的数组。</li></ul></li><li><p>Window.history <code>只读</code></p><ul><li>返回对 history 对象的引用。</li></ul></li><li><p>Window.indexedDB <code>只读</code></p><ul><li>为应用程序提供异步访问索引数据库的能力；返回一个 IDBFactory 对象。</li></ul></li><li><p>Window.innerHeight <code>只读</code></p><ul><li>获取浏览器窗口的内容区域的高度，包括（已渲染的）水平滚动条。</li></ul></li><li><p>Window.innerWidth <code>只读</code></p><ul><li>获取浏览器窗口的内容区域的宽度，包括（已渲染的）竖直滚动条。</li></ul></li><li><p>Window.isSecureContext <code>只读</code></p><ul><li>返回一个布尔值，表示当前上下文安全（true）或不安全（false）。</li></ul></li><li><p>Window.length <code>只读</code></p><ul><li>返回窗口中的帧数。参见 window.frames。</li></ul></li><li><p>Window.location</p><ul><li>获取/设置 window 对象的位置，或当前的 URL。</li></ul></li><li><p>Window.locationbar <code>只读</code></p><ul><li>返回 locationbar 对象。</li></ul></li><li><p>Window.localStorage <code>只读</code></p><ul><li>返回一个对用于存储数据的本地存储对象的引用，该对象只能由创建它的源访问。</li></ul></li><li><p>Window.menubar <code>只读</code></p><ul><li>返回 menubar 对象。</li></ul></li><li><p>Window.mozInnerScreenX <code>只读</code> 非标准</p><ul><li>返回窗口视口左上角的水平（X）坐标，以屏幕坐标表示。这个值是以 CSS 像素为单位报告的。请参阅 - nsIDOMWindowUtils 中的 mozScreenPixelsPerCSSPixel，以获得转换系数，以便在需要时适应屏幕像素。</li></ul></li><li><p>Window.mozInnerScreenY <code>只读</code> 非标准</p><ul><li>返回窗口视口左上角的垂直（Y）坐标，以屏幕坐标表示。这个值是以 CSS 像素为单位报告的。请参阅 - mozScreenPixelsPerCSSPixel，如果需要的话，可以用一个转换系数来适应屏幕像素。</li></ul></li><li><p>Window.name</p><ul><li>获取/设置 window 对象的名称。</li></ul></li><li></li><li><p>Window.navigator <code>只读</code></p><ul><li>返回对 navigator 对象的引用。</li></ul></li><li><p>Window.opener</p><ul><li>返回对打开当前窗口的 window 的引用。</li></ul></li><li><p>Window.origin <code>只读</code></p><ul><li>返回全局对象的源，序列化为一个字符串。</li></ul></li><li><p>Window.outerHeight <code>只读</code></p><ul><li>获取浏览器窗口外侧的高度。</li></ul></li><li><p>Window.outerWidth <code>只读</code></p><ul><li>获取浏览器窗口外侧的宽度。</li></ul></li><li><p>Window.pageXOffset <code>只读</code></p><ul><li>window.scrollX 的别名。</li></ul></li><li><p>Window.pageYOffset <code>只读</code></p><ul><li>window.scrollY 的别名。</li></ul></li><li><p>Window.parent <code>只读</code></p><ul><li>返回对当前窗口或子框架的被继承对象的引用。</li></ul></li><li><p>Window.performance <code>只读</code></p><ul><li>返回一个 Performance 对象，其中包括 timing 和 navigation 属性，每个属性都是提供性能相关数据的对- 象。有关其他信息和例子，请参见使用导航计时。</li></ul></li><li><p>Window.personalbar (en-US) <code>只读</code></p><ul><li>返回 personalbar 对象。</li></ul></li><li><p>Window.scheduler (en-US) <code>只读</code></p><ul><li>返回与当前上下文相关的 Scheduler (en-US) 对象。这是使用优先级任务调度 API (en-US) 的入口。</li></ul></li><li><p>Window.screen <code>只读</code></p><ul><li>返回与该窗口相关的 screen 对象的引用。</li></ul></li><li><p>Window.screenX 和 Window.screenLeft <code>只读</code></p><ul><li>这两个属性都返回从用户浏览器视口的左边界到屏幕左侧的水平距离。</li></ul></li><li><p>Window.screenY 和 Window.screenTop <code>只读</code></p><ul><li>这两个属性都会返回从用户浏览器视口的上边界到屏幕上侧的垂直距离。</li></ul></li><li><p>Window.scrollbars <code>只读</code></p><ul><li>返回 scrollbars 对象。</li></ul></li><li><p>Window.scrollMaxX 非标准 <code>只读</code></p><ul><li>窗口在水平方向上可以滚动的最大偏移量，即文档宽度减去视口宽度。</li></ul></li><li><p>Window.scrollMaxY 非标准 <code>只读</code></p><ul><li>窗口在竖直方向上可以滚动的最大偏移量，即文档高度减去视口高度。</li></ul></li><li><p>Window.scrollX <code>只读</code></p><ul><li>返回文档已经被水平滚动的像素数。</li></ul></li><li><p>Window.scrollY <code>只读</code></p><ul><li>返回文档已经被竖直滚动的像素数。</li></ul></li><li><p>Window.self <code>只读</code></p><ul><li>返回对 window 对象本身的引用。</li></ul></li><li><p>Window.sessionStorage</p><ul><li>返回对用于存储数据的会话存储对象的引用，这些数据只能由创建它的源访问。</li></ul></li><li><p>Window.speechSynthesis (en-US) <code>只读</code></p><ul><li>返回 SpeechSynthesis 对象，这是使用 Web Speech API 语音合成功能的入门点。</li></ul></li><li><p>Window.statusbar (en-US) <code>只读</code></p><ul><li>返回 statusbar 对象。</li></ul></li><li><p>Window.toolbar (en-US) <code>只读</code></p><ul><li>返回 toolbar 对象。</li></ul></li><li><p>Window.top <code>只读</code></p><ul><li>返回对窗口层次结构中最顶层窗口的引用。这个属性是只读的。</li></ul></li><li><p>Window.visualViewport <code>只读</code></p><ul><li>返回 VisualViewport 对象，代表一个给定窗口的视觉视口。</li></ul></li><li><p>Window.window <code>只读</code></p><ul><li>返回对当前 window 的引用。</li></ul></li><li><p>window[0]、window[1] 等</p><ul><li>以逐帧形式返回对 window 对象的引用，要了解更多细节，参见 Window.frames。</li></ul></li><li><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2></li><li><p>Window.addEventListener()</p><ul><li>为 window 上的特定事件类型注册一个事件处理器。</li></ul></li><li><p>Window.atob()</p><ul><li>解码一个使用 base-64 编码的数据字符串。</li></ul></li><li><p>Window.alert()</p><ul><li>显示一个警告对话框。</li></ul></li><li><p>Window.blur()</p><ul><li>将焦点从窗口上移开。</li></ul></li><li><p>Window.btoa()</p><ul><li>从一串二进制数据中创建一个 base-64 编码的 ASCII 字符串。</li></ul></li><li><p>Window.cancelAnimationFrame()</p><ul><li>取消之前使用 Window.requestAnimationFrame 安排的回调。</li></ul></li><li><p>Window.cancelIdleCallback()</p><ul><li>取消之前使用 Window.requestIdleCallback 安排的回调。</li></ul></li><li><p>Window.clearImmediate()</p><ul><li>取消使用 setImmediate() 设置的重复执行任务。</li></ul></li><li><p>Window.clearInterval()</p><ul><li>取消使用 setInterval() 设置的重复执行任务。</li></ul></li><li><p>Window.clearTimeout()</p><ul><li>取消使用 setTimeout() 设置的延时执行任务。</li></ul></li><li><p>Window.close()</p><ul><li>关闭当前窗口。</li></ul></li><li><p>Window.confirm()</p><ul><li>显示一个带有用户需要回应的信息对话框。</li></ul></li><li><p>Window.createImageBitmap()</p><ul><li>接受各种不同的图像源，并返回一个 Promise，经兑现可得到 ImageBitmap。可以选择将图片源裁剪成以 (sx, - sy) 为起点的像素矩形，宽度为 sw，高度为 sh。</li></ul></li><li><p>Window.dispatchEvent()</p><ul><li>用于触发事件。</li></ul></li><li><p>Window.fetch()</p><ul><li>开始从网络获取资源的过程。</li></ul></li><li><p>Window.focus()</p><ul><li>在当前窗口上设置焦点。</li></ul></li><li><p>Window.getComputedStyle()</p><ul><li>获取指定元素的计算样式。计算的样式表示该元素的所有 CSS 属性的计算值。</li></ul></li><li><p>Window.getSelection()</p><ul><li>返回代表所选项目的 selection 对象。</li></ul></li><li><p>Window.matchMedia()</p><ul><li>返回代表指定媒体查询字符串的 MediaQueryList 对象。</li></ul></li><li><p>Window.moveBy()</p><ul><li>将当前窗口移动一个指定的偏量值。</li></ul></li><li><p>Window.moveTo()</p><ul><li>将窗口移动到指定的坐标。</li></ul></li><li><p>Window.open()</p><ul><li>打开一个新窗口。</li></ul></li><li><p>Window.postMessage()</p><ul><li>为一个窗口向另一个窗口发送一串数据提供了安全的手段，该窗口不需要与第一个窗口在同一域内。</li></ul></li><li><p>Window.print()</p><ul><li>打开“打印”对话框，打印当前文档。</li></ul></li><li><p>Window.prompt()</p><ul><li>返回用户在提示对话框中输入的文本。</li></ul></li><li><p>Window.removeEventListener()</p><ul><li>从 window 上移除一个事件监听器。</li></ul></li><li><p>Window.reportError() (en-US)</p><ul><li>报告一个脚本中的错误，模拟一个未处理的异常。</li></ul></li><li><p>Window.requestAnimationFrame()</p><ul><li>告诉浏览器一个动画正在进行中，要求浏览器为下一个动画帧安排窗口的重绘。</li></ul></li><li><p>Window.requestIdleCallback()</p><ul><li>启用浏览器空闲期间的任务调度。</li></ul></li><li><p>Window.resizeBy()</p><ul><li>按一定的变化量调整当前窗口的大小。</li></ul></li><li><p>Window.resizeTo()</p><ul><li>动态地调整窗口的大小。</li></ul></li><li><p>Window.scroll()</p><ul><li>将窗口滚动到文档中的一个特定位置。</li></ul></li><li><p>Window.scrollBy()</p><ul><li>将窗口中的文档按给定值滚动。</li></ul></li><li><p>Window.scrollTo()</p><ul><li>将文档滚动至特定坐标。</li></ul></li><li><p>Window.setImmediate()</p><ul><li>在浏览器完成其他繁重的任务后执行一个函数。</li></ul></li><li><p>Window.setInterval()</p><ul><li>安排一个函数，在给定的毫秒数过去后执行。</li></ul></li><li><p>Window.setTimeout()</p><ul><li>安排函数在给定的时间内执行。</li></ul></li><li><p>Window.stop()</p><ul><li>该方法停止了窗口的加载。</li></ul></li></ul><h3 id="动画事件" tabindex="-1">动画事件 <a class="header-anchor" href="#动画事件" aria-label="Permalink to &quot;动画事件&quot;">​</a></h3><ul><li><p>animationcancel (en-US)</p><ul><li>当一个动画意外地中止时，触发该事件。</li></ul></li><li><p>animationend (en-US)</p><ul><li>当一个动画正常完成时，触发该事件。</li></ul></li><li><p>animationiteration (en-US)</p><ul><li>当一个动画迭代完成时，触发该事件。</li></ul></li><li><p>animationstart (en-US)</p><ul><li>当一个动画开始时，触发该事件。</li></ul></li></ul><h3 id="剪切板事件" tabindex="-1">剪切板事件 <a class="header-anchor" href="#剪切板事件" aria-label="Permalink to &quot;剪切板事件&quot;">​</a></h3><ul><li><p>copy</p><ul><li>当用户通过浏览器的用户界面启动一个复制动作时，触发该事件。也可通过 oncopy 属性设置。</li></ul></li><li><p>cut</p><ul><li>当用户通过浏览器的用户界面启动一个剪切动作时，触发该事件。也可通过 oncut 属性设置。</li></ul></li><li><p>paste</p><ul><li>当用户通过浏览器的用户界面启动一个粘贴动作时，触发该事件。也可通过 paste 属性设置。</li></ul></li></ul><h3 id="连接事件" tabindex="-1">连接事件 <a class="header-anchor" href="#连接事件" aria-label="Permalink to &quot;连接事件&quot;">​</a></h3><ul><li><p>offline</p><ul><li>当浏览器失去了对网络的访问，并且 navigator.onLine 的值转换为 false 时，触发该事件。</li></ul></li><li><p>online</p><ul><li>当浏览器获得了对网络的访问，并且 navigator.onLine 的值转换为 true 时，触发该事件。</li></ul></li></ul><h3 id="聚焦事件" tabindex="-1">聚焦事件 <a class="header-anchor" href="#聚焦事件" aria-label="Permalink to &quot;聚焦事件&quot;">​</a></h3><ul><li><p>blur</p><ul><li>当一个元素失去焦点时，触发该事件。</li></ul></li><li><p>focus</p><ul><li>当一个元素获得焦点时，触发该事件。</li></ul></li></ul><h3 id="gamepad-事件" tabindex="-1">Gamepad 事件 <a class="header-anchor" href="#gamepad-事件" aria-label="Permalink to &quot;Gamepad 事件&quot;">​</a></h3><ul><li><p>gamepadconnected</p><ul><li>当浏览器检测到游戏板已被连接或首次使用游戏板的按钮/轴时启动。</li></ul></li><li><p>gamepaddisconnected (en-US)</p><ul><li>当浏览器检测到游戏板被断开连接时启动。</li></ul></li></ul><h3 id="历史记录事件" tabindex="-1">历史记录事件 <a class="header-anchor" href="#历史记录事件" aria-label="Permalink to &quot;历史记录事件&quot;">​</a></h3><ul><li><p>hashchange</p><ul><li>当 URL 的片段标识符（URL 中以 # 符号开头及其后面的部分）发生变化时，触发该事件。</li></ul></li><li><p>pagehide</p><ul><li>当浏览器隐藏了当前的文档，而在切换到显示会话历史中的另一个文档时触发该事件。例如，当用户点击“后退”按钮- 或点击“前进”按钮在会话历史中移动时，就会发生这种情况。</li></ul></li><li><p>pageshow</p><ul><li>当浏览器因导航任务而使文件可见时触发该事件，不仅包括页面首次加载时，还包括用户在同一标签内导航到另一个- 页面后再返回该页面等情况。</li></ul></li><li><p>popstate</p><ul><li>当活动的历史条目改变时，触发该事件。</li></ul></li></ul><h3 id="加载和卸载事件" tabindex="-1">加载和卸载事件 <a class="header-anchor" href="#加载和卸载事件" aria-label="Permalink to &quot;加载和卸载事件&quot;">​</a></h3><ul><li><p>beforeunload</p><ul><li>当窗口、文档及其资源即将被卸载时，触发该事件。</li></ul></li><li><p>load</p><ul><li>当整个页面加载完毕时触发该事件，包括所有依赖资源，如样式表图片。</li></ul></li><li><p>unload</p><ul><li>当文档或子资源正在被卸载时触发，触发该事件。</li></ul></li></ul><h3 id="清单事件" tabindex="-1">清单事件 <a class="header-anchor" href="#清单事件" aria-label="Permalink to &quot;清单事件&quot;">​</a></h3><ul><li><p>appinstalled</p><ul><li>当浏览器成功地将一个页面安装为一个应用程序时，触发该事件。</li></ul></li><li><p>beforeinstallprompt</p><ul><li>当用户即将被提示安装一个 web 应用程序时，触发该事件。</li></ul></li></ul><h3 id="消息事件" tabindex="-1">消息事件 <a class="header-anchor" href="#消息事件" aria-label="Permalink to &quot;消息事件&quot;">​</a></h3><ul><li><p>message</p><ul><li>窗口收到消息时触发该事件，例如从另一个浏览上下文中调用 Window.postMessage()。</li></ul></li><li><p>messageerror</p><ul><li>当 Window 对象收到无法反序列化的消息时，触发该事件。</li></ul></li></ul><h3 id="打印事件" tabindex="-1">打印事件 <a class="header-anchor" href="#打印事件" aria-label="Permalink to &quot;打印事件&quot;">​</a></h3><ul><li><p>afterprint</p><ul><li>在相关文档开始打印或打印预览关闭后，触发该事件。</li></ul></li><li><p>beforeprint</p><ul><li>当相关文件即将被打印或预览打印时，触发该事件。</li></ul></li></ul><h3 id="promise-拒绝事件" tabindex="-1">Promise 拒绝事件 <a class="header-anchor" href="#promise-拒绝事件" aria-label="Permalink to &quot;Promise 拒绝事件&quot;">​</a></h3><ul><li><p>rejectionhandled</p><ul><li>每当一个 JavaScript Promise 被拒绝时，不管是否有处理程序来捕捉拒绝，都会触发该事件。</li></ul></li><li><p>unhandledrejection</p><ul><li>当 JavaScript Promise 被拒绝，但没有处理程序来捕获拒绝时，触发该事件。</li></ul></li></ul><h3 id="渐变事件" tabindex="-1">渐变事件 <a class="header-anchor" href="#渐变事件" aria-label="Permalink to &quot;渐变事件&quot;">​</a></h3><ul><li><p>transitioncancel (en-US)</p><ul><li>当 CSS 渐变被取消时，触发该事件。</li></ul></li><li><p>transitionend (en-US)</p><ul><li>当 CSS 渐变完成时，触发该事件。</li></ul></li><li><p>transitionrun (en-US)</p><ul><li>当 CSS 渐变首次创建时，触发该事件。</li></ul></li><li><p>transitionstart (en-US)</p><ul><li>当 CSS 渐变真正开始时，触发该事件。</li></ul></li></ul><h1 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noreferrer">MDN 官网：https://developer.mozilla.org/zh-CN/docs/Web/API/Window</a></p>',34),n=[u];function d(p,t,r,c,s,w){return e(),i("div",null,n)}const m=l(a,[["render",d]]);export{W as __pageData,m as default};
