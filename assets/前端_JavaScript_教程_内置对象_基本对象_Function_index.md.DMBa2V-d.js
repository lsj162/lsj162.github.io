import{_ as t,c as a,o as n,a6 as i}from"./chunks/framework.DwCPU-X7.js";const F=JSON.parse('{"title":"Function","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JavaScript/教程/内置对象/基本对象/Function/index.md","filePath":"前端/JavaScript/教程/内置对象/基本对象/Function/index.md","lastUpdated":1711682507000}'),o={name:"前端/JavaScript/教程/内置对象/基本对象/Function/index.md"},e=i('<h1 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h1><p>每个 JavaScript 函数实际上都是一个 Function 对象。运行 (function(){}).constructor === Function // true 便可以得到这个结论。</p><p>Function 构造函数与函数声明之间的不同 由 Function 构造函数创建的函数不会创建当前环境的闭包，它们总是被创建于全局环境，因此在运行时它们只能访问全局变量和自己的局部变量，不能访问它们被 Function 构造函数创建时所在的作用域的变量。这一点与使用 eval() 执行创建函数的代码不同。</p><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><p>Function() 创建一个新的 Function 对象。直接调用此构造函数可以动态创建函数，</p><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><ul><li><p>Function.prototype.length 函数期望的参数数量。</p></li><li><p>Function.prototype.name 函数的名称。</p></li><li><p>Function.prototype.prototype 一个 Function 对象在使用 new 运算符来作为构造函数时，会用到它的 prototype 属性。它将成为新对象的原型。</p></li></ul><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><ul><li><p>Function.prototype.apply(thisArg [, argsArray]) 调用一个函数并将其 this 的值设置为提供的 thisArg。参数可用以通过数组对象传递。</p></li><li><p>Function.prototype.bind(thisArg[, arg1[, arg2[, ...argN]]]) 创建一个新的函数，该函数在调用时，会将 this 设置为提供的 thisArg。在调用新绑定的函数时，可选的参数序列（[, arg1[, arg2[, ...argN]]]）会被提前添加到参数序列中（译者注：即调用绑定创建的函数时，传递的参数会接续在可选参数序列后）。</p></li><li><p>Function.prototype.call(thisArg[, arg1, arg2, ...argN]) 调用一个函数，并将其 this 值设置为提供的值。也可以选择传输新参数。</p></li><li><p>Function.prototype.toString() 返回表示函数源码的字符串。覆盖了 Object.prototype.toString 方法。</p></li></ul>',9),r=[e];function c(p,l,u,s,h,d){return n(),a("div",null,r)}const g=t(o,[["render",c]]);export{F as __pageData,g as default};
