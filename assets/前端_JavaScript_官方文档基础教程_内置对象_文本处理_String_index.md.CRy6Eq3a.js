import{_ as t,c as p,o as r,a6 as e}from"./chunks/framework.DwCPU-X7.js";const y=JSON.parse('{"title":"String","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/官方文档基础教程/内置对象/文本处理/String/index.md","filePath":"前端/JavaScript/官方文档基础教程/内置对象/文本处理/String/index.md","lastUpdated":1712400937000}'),o={name:"前端/JavaScript/官方文档基础教程/内置对象/文本处理/String/index.md"},i=e('<h1 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h1><p>String 对象用于表示和操作字符序列。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><p>String.prototype.at() 返回指定索引处的字符（正好是一个 UTF-16 码元）。接受负整数，从最后一个字符串字符开始倒数。</p><p>String.prototype.charAt() 返回指定 index 处的字符（正好是一个 UTF-16 码元）。</p><p>String.prototype.charCodeAt() 返回一个数字，它是给定 index 处的 UTF-16 码元值。</p><p>String.prototype.codePointAt() 返回一个非负整数值，它是从指定位置（pos）开始的 UTF-16 编码码位的码位值。</p><p>String.prototype.concat() 合并两个（或更多）字符串的文本并返回一个新字符串。</p><p>String.prototype.endsWith() 确定字符串是否以字符串 searchString 的字符结尾。</p><p>String.prototype.includes() 确定调用字符串是否包含 searchString。</p><p>String.prototype.indexOf() 返回在调用 String 对象中第一次出现的 searchValue 的索引，如果未找到则返回 -1。</p><p>String.prototype.isWellFormed() 返回一个布尔值，指示此字符串是否包含任何单独代理项。</p><p>String.prototype.lastIndexOf() 返回在调用 String 对象中最后一次出现的 searchValue 的索引，如果未找到则返回 -1。</p><p>String.prototype.localeCompare() 返回一个数字，用于指示一个参考字符串 compareString 是否在排序顺序前面或之后或与给定字符串相同。</p><p>String.prototype.match() 用于将正则表达式 regexp 与字符串匹配。</p><p>String.prototype.matchAll() 返回所有 regexp 的匹配项的迭代器。</p><p>String.prototype.normalize() 返回调用字符串值的 Unicode 规范化形式。</p><p>String.prototype.padEnd() 用给定字符串从末尾填充当前字符串并返回长度为 targetLength 的新字符串。</p><p>String.prototype.padStart() 用给定字符串从开头填充当前字符串并返回长度为 targetLength 的新字符串。</p><p>String.prototype.repeat() 返回由对象的元素重复 count 次组成的字符串。</p><p>String.prototype.replace() 用于使用 replaceWith 替换出现的 searchFor。searchFor 可以是字符串或正则表达式，replaceWith 可以是字符串或函数。</p><p>String.prototype.replaceAll() 用于使用 replaceWith 替换所有出现的 searchFor。searchFor 可以是字符串或正则表达式，replaceWith 可以是字符串或函数。</p><p>String.prototype.search() 搜索正则表达式 regexp 和调用字符串之间的匹配项。</p><p>String.prototype.slice() 提取字符串的一部分并返回一个新字符串。</p><p>String.prototype.split() 返回一个由在出现子字符串 sep 时拆分调用的字符串然后填充的字符串数组。</p><p>String.prototype.startsWith() 确定调用字符串是否以字符串 searchString 的字符开头。</p><p>String.prototype.substring() 返回一个新字符串，其中包含来自（或之间）指定索引（或多个索引）的调用字符串的字符。</p><p>String.prototype.toLocaleLowerCase() 字符串中的字符将转换为小写，同时尊重当前语言环境。</p><p>对于大多数语言，这将返回与 toLowerCase() 相同的结果。</p><p>String.prototype.toLocaleUpperCase( [locale, ...locales]) 字符串中的字符将转换为大写，同时尊重当前语言环境。</p><p>对于大多数语言，这将返回与 toUpperCase() 相同的结果。</p><p>String.prototype.toLowerCase() 返回转换为小写的调用字符串值。</p><p>String.prototype.toString() 返回表示指定对象的字符串。重写 Object.prototype.toString() 方法。</p><p>String.prototype.toUpperCase() 返回转换为大写的调用字符串值。</p><p>String.prototype.toWellFormed() 返回一个字符串，其中包含的所有单独代理项都替换为 Unicode 替换字符 U+FFFD。</p><p>String.prototype.trim() 修剪字符串开头和结尾的空格。</p><p>String.prototype.trimEnd() 修剪字符串结尾的空格。</p><p>String.prototype.trimStart() 修剪字符串开头的空格。</p><p>String.prototype.valueOf() 返回指定对象的原始值。重写 Object.prototype.valueOf() 方法。</p><p>String.prototype<a href="./.html">@@iterator</a> 返回一个新的迭代器对象，该对象迭代 String 值的码位，将每个码位作为 String 值返回。</p>',40),a=[i];function n(g,c,S,s,l,d){return r(),p("div",null,a)}const _=t(o,[["render",n]]);export{y as __pageData,_ as default};
