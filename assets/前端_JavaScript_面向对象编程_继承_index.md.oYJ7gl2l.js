import{_ as a,c as t,o as e,a6 as i}from"./chunks/framework.DwCPU-X7.js";const S=JSON.parse('{"title":"继承问题","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JavaScript/面向对象编程/继承/index.md","filePath":"前端/JavaScript/面向对象编程/继承/index.md","lastUpdated":1711585217000}'),l={name:"前端/JavaScript/面向对象编程/继承/index.md"},r=i('<h1 id="继承问题" tabindex="-1">继承问题 <a class="header-anchor" href="#继承问题" aria-label="Permalink to &quot;继承问题&quot;">​</a></h1><p>JavaScript 继承不应该引起以下问题：</p><ol><li>共享引用属性导致的意外修改。</li><li>无法向父类构造函数传递参数。</li><li>子类无法访问父类的私有成员。</li><li>无法继承父类原型上的方法和属性。</li><li>内存浪费，每个子类实例都拷贝父类实例方法。</li><li>父类构造函数被调用多次。</li><li>原型污染。</li><li>代码可读性和维护性差。</li></ol><p>在 JavaScript 中，可以通过多种方式来实现继承，其中包括使用原型链继承、构造函数继承、组合继承、原型式继承、寄生式继承、寄生组合式继承等方式。</p>',4),o=[r];function _(c,n,s,d,p,h){return e(),t("div",null,o)}const f=a(l,[["render",_]]);export{S as __pageData,f as default};
