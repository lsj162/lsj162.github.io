import{_ as e,c as t,o,a6 as a}from"./chunks/framework.DwCPU-X7.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"计算机知识/数据结构/线性数据结构/队列 (Queue)/优先队列 (Priority Queue).md","filePath":"计算机知识/数据结构/线性数据结构/队列 (Queue)/优先队列 (Priority Queue).md","lastUpdated":1712539768000}'),r={name:"计算机知识/数据结构/线性数据结构/队列 (Queue)/优先队列 (Priority Queue).md"},i=a('<p>优先队列（Priority Queue）是一种特殊类型的队列，在优先队列中，每个元素都会被赋予一个优先级，而队列的出队操作会基于这些优先级来决定元素的顺序。在优先队列中，具有最高优先级的元素将总是最先出队，即优先队列是一种最高优先级先出（first in, largest out）的数据结构。</p><p>优先队列的实现通常采用堆数据结构，具体来说，是通过完全二叉树实现一个小顶堆。在物理存储方面，优先队列底层通过数组来实现元素的存储。数组下标的转换关系为：</p><ul><li>左孩子结点的下标：leftNo = parentNo * 2 + 1</li><li>右孩子结点的下标：rightNo = parentNo * 2 + 2</li><li>父节点的下标：parentNo = (currentNo -1) / 2</li></ul><p>使用优先队列的优点是可以快速地找到并删除优先级最高的元素，这使得优先队列在需要按照优先级来处理元素的场景中非常有用，比如在事件驱动系统、操作系统任务调度、贪心算法等领域中都有广泛的应用。</p><p>在编程语言中，如 Java 中的<code>PriorityQueue</code>类，或者 Python 中的<code>heapq</code>模块，都是实现了优先队列的数据结构。在 Python 中，可以使用<code>heapq</code>模块，通过一个列表来表示优先队列，使用<code>heapq.heapify()</code>函数来创建一个堆，然后可以通过<code>heapq.heappop()</code>和<code>heapq.heappush()</code>函数来从堆中添加和删除元素<a href="https://zhuanlan.zhihu.com/p/94943012" target="_blank" rel="noreferrer">②</a>。</p>',5),p=[i];function _(c,u,n,d,s,h){return o(),t("div",null,p)}const P=e(r,[["render",_]]);export{f as __pageData,P as default};
