import{_ as e,c as t,o as l,a6 as i}from"./chunks/framework.DwCPU-X7.js";const j=JSON.parse('{"title":"Object","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JavaScript/官方文档基础教程/内置对象/基本对象/Object/index.md","filePath":"前端/JavaScript/官方文档基础教程/内置对象/基本对象/Object/index.md","lastUpdated":1712399324000}'),a={name:"前端/JavaScript/官方文档基础教程/内置对象/基本对象/Object/index.md"},r=i('<h1 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h1><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><ul><li>Object() 将输入转换为一个对象。</li></ul><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><ul><li>Object.prototype.constructor 创建该实例对象的构造函数。</li></ul><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><ul><li><p>Object.prototype.hasOwnProperty() 返回一个布尔值，用于表示一个对象自身是否包含指定的属性，该方法并不会查找原型链上继承来的属性。</p></li><li><p>Object.prototype.isPrototypeOf() 返回一个布尔值，用于表示该方法所调用的对象是否在指定对象的原型链中。</p></li><li><p>Object.prototype.propertyIsEnumerable() 返回一个布尔值，指示指定属性是否是对象的可枚举自有属性。</p></li><li><p>Object.prototype.toLocaleString() 调用 toString() 方法。</p></li><li><p>Object.prototype.toString() 返回一个代表该对象的字符串。</p></li><li><p>Object.prototype.valueOf() 返回指定对象的基本类型值。</p></li></ul><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><ul><li><p>Object.assign() 将一个或多个源对象的所有可枚举自有属性的值复制到目标对象中。</p></li><li><p>Object.create() 使用指定的原型对象和属性创建一个新对象。</p></li><li><p>Object.defineProperties() 向对象添加多个由给定描述符描述的命名属性。</p></li><li><p>Object.defineProperty() 向对象添加一个由给定描述符描述的命名属性。</p></li><li><p>Object.entries() 返回包含给定对象自有可枚举字符串属性的所有 [key, value] 数组。</p></li><li><p>Object.freeze() 冻结一个对象。其他代码不能删除或更改其任何属性。</p></li><li><p>Object.fromEntries() 从一个包含 [key, value] 对的可迭代对象中返回一个新的对象（Object.entries 的反操作）。</p></li><li><p>Object.getOwnPropertyDescriptor() 返回一个对象的已命名属性的属性描述符。</p></li><li><p>Object.getOwnPropertyDescriptors() 返回一个包含对象所有自有属性的属性描述符的对象。</p></li><li><p>Object.getOwnPropertyNames() 返回一个包含给定对象的所有自有可枚举和不可枚举属性名称的数组。</p></li><li><p>Object.getOwnPropertySymbols() 返回一个数组，它包含了指定对象所有自有 symbol 属性。</p></li><li><p>Object.getPrototypeOf() 返回指定对象的原型（内部的 [[Prototype]] 属性）。</p></li><li><p>Object.hasOwn() 如果指定属性是指定对象的自有属性，则返回 true，否则返回 false。如果该属性是继承的或不存在，则返回 false。</p></li><li><p>Object.is() 比较两个值是否相同。所有 NaN 值都相等（这与 == 使用的 IsLooselyEqual 和 === 使用的 IsStrictlyEqual 不同）。</p></li><li><p>Object.isExtensible() 判断对象是否可扩展。</p></li><li><p>Object.isFrozen() 判断对象是否已经冻结。</p></li><li><p>Object.isSealed() 判断对象是否已经封闭。</p></li><li><p>Object.keys() 返回一个包含所有给定对象自有可枚举字符串属性名称的数组。</p></li><li><p>Object.preventExtensions() 防止对象的任何扩展。</p></li><li><p>Object.seal() 防止其他代码删除对象的属性。</p></li><li><p>Object.setPrototypeOf() 设置对象的原型（即内部 [[Prototype]] 属性）。</p></li><li><p>Object.values() 返回包含给定对象所有自有可枚举字符串属性的值的数组。</p></li></ul><h1 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">MDN 官网：https://developer.mozilla.org</a></p>',11),p=[r];function o(c,s,n,b,O,d){return l(),t("div",null,p)}const u=e(a,[["render",o]]);export{j as __pageData,u as default};
