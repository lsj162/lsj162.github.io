import{_ as e,c as a,o as t,a6 as r}from"./chunks/framework.DwCPU-X7.js";const x=JSON.parse('{"title":"Proxy","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/教程/内置对象/反射/Proxy/index.md","filePath":"前端/JavaScript/教程/内置对象/反射/Proxy/index.md","lastUpdated":1711682507000}'),s={name:"前端/JavaScript/教程/内置对象/反射/Proxy/index.md"},n=r('<h1 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h1><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, handler);</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p>target 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><p>handler 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><p>Proxy.revocable() 创建一个可撤销的 Proxy 对象。</p><h2 id="handler-对象的方法" tabindex="-1">handler 对象的方法 <a class="header-anchor" href="#handler-对象的方法" aria-label="Permalink to &quot;handler 对象的方法&quot;">​</a></h2><p>handler 对象是一个容纳一批特定属性的占位符对象。它包含有 Proxy 的各个捕获器（trap）。</p><p>所有的捕捉器是可选的。如果没有定义某个捕捉器，那么就会保留源对象的默认行为。</p><p>handler.getPrototypeOf() Object.getPrototypeOf 方法的捕捉器。</p><p>handler.setPrototypeOf() Object.setPrototypeOf 方法的捕捉器。</p><p>handler.isExtensible() Object.isExtensible 方法的捕捉器。</p><p>handler.preventExtensions() Object.preventExtensions 方法的捕捉器。</p><p>handler.getOwnPropertyDescriptor() Object.getOwnPropertyDescriptor 方法的捕捉器。</p><p>handler.defineProperty() Object.defineProperty 方法的捕捉器。</p><p>handler.has() in 操作符的捕捉器。</p><p>handler.get() 属性读取操作的捕捉器。</p><p>handler.set() 属性设置操作的捕捉器。</p><p>handler.deleteProperty() delete 操作符的捕捉器。</p><p>handler.ownKeys() Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。</p><p>handler.apply() 函数调用操作的捕捉器。</p><p>handler.construct() new 操作符的捕捉器。</p>',25),p=[n];function i(o,l,h,d,c,y){return t(),a("div",null,p)}const k=e(s,[["render",i]]);export{x as __pageData,k as default};
