import{_ as l,c as t,o as i,a6 as e}from"./chunks/framework.DwCPU-X7.js";const T=JSON.parse('{"title":"定义","description":"","frontmatter":{},"headers":[],"relativePath":"计算机知识/数据结构/非线性数据结构/树形结构/树 (Tree)/树.md","filePath":"计算机知识/数据结构/非线性数据结构/树形结构/树 (Tree)/树.md","lastUpdated":null}'),a={name:"计算机知识/数据结构/非线性数据结构/树形结构/树 (Tree)/树.md"},o=e('<h1 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h1><p>树（Tree）是一种抽象的数据结构，它由一组节点（Node）和连接这些节点的边（Edge）组成。</p><p>在数据结构中，树（Tree）是一种抽象数据类型（ADT），它是由节点和边组成的非线性数据结构。树通常用来模拟具有层次关系的数据，例如文件系统、组织结构、语法分析树等。树中的节点可以有零个或多个子节点，但只有一个父节点，除了根节点外，每个节点有且仅有一个父节点。</p><h2 id="树的术语定义如下" tabindex="-1">树的术语定义如下： <a class="header-anchor" href="#树的术语定义如下" aria-label="Permalink to &quot;树的术语定义如下：&quot;">​</a></h2><ul><li><ol><li>根节点（Root）：树的最顶端节点，没有父节点。</li></ol></li><li><ol start="2"><li>边（Edge）：节点之间的连接称为边。在树中，边表示节点之间的父子关系。</li></ol></li><li><ol start="3"><li>父节点（Parent）：与子节点直接相连的节点。</li></ol></li><li><ol start="4"><li>子节点（Child）：直接连接到另一个节点的节点。</li></ol></li><li><ol start="5"><li>兄弟节点（Sibling）：具有相同父节点的节点。</li></ol></li><li><ol start="6"><li>内部节点（Internal Node）：至少有一个子节点的节点。</li></ol></li><li><ol start="7"><li>叶节点（Leaf）：没有子节点的节点。</li></ol></li><li><ol start="8"><li>路径（Path）：从根节点到某个节点的边的序列。</li></ol></li><li><ol start="9"><li>深度（Depth）：从根节点到某个节点的边的数量。</li></ol></li><li><ol start="10"><li>高度（Height）：从某个节点到其最深叶节点的最长路径的边的数量。</li></ol></li></ul>',5),r=[o];function s(n,_,d,c,h,p){return i(),t("div",null,r)}const f=l(a,[["render",s]]);export{T as __pageData,f as default};
