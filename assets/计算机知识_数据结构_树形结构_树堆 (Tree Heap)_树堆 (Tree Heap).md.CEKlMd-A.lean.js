import{_ as a,c as r,o as t,j as e,a as p}from"./chunks/framework.DALfHeHd.js";const B=JSON.parse('{"title":"树堆 (Tree Heap)","description":"","frontmatter":{},"headers":[],"relativePath":"计算机知识/数据结构/树形结构/树堆 (Tree Heap)/树堆 (Tree Heap).md","filePath":"计算机知识/数据结构/树形结构/树堆 (Tree Heap)/树堆 (Tree Heap).md","lastUpdated":1717313630000}'),o={name:"计算机知识/数据结构/树形结构/树堆 (Tree Heap)/树堆 (Tree Heap).md"},s=e("h1",{id:"树堆-tree-heap",tabindex:"-1"},[p("树堆 (Tree Heap) "),e("a",{class:"header-anchor",href:"#树堆-tree-heap","aria-label":'Permalink to "树堆 (Tree Heap)"'},"​")],-1),l=e("p",null,"树堆（Treap）是基于二叉查找树（BST）和堆（Heap）这两个数据结构的优势结合产生的，Treap=Tree+heap。",-1),n=e("p",null,"特点包括：",-1),_=e("ol",null,[e("li",null,"节点的优先级不是排序的，所以它们的堆性质可能会被破坏，但在每次插入和删除操作时，通过旋转等操作，Treap 都会尝试恢复堆性质。"),e("li",null,"Treap 在大多数操作中具有较好的性能，因为它们既利用了 BST 的高效查找能力，又保持了堆的高效插入和删除能力。"),e("li",null,"由于其随机性质，Treap 在实际应用中表现出色，特别是在需要快速插入和删除操作的场景。 Treap 的操作通常包括旋转操作，以维持 BST 和堆的性质。旋转操作包括左旋和右旋两种，它们能够将一个不满足 BST 或堆性质的子树重新组织成满足性质的子树 ①③。")],-1),c=[s,l,n,_];function d(i,T,h,u,H,m){return t(),r("div",null,c)}const x=a(o,[["render",d]]);export{B as __pageData,x as default};
