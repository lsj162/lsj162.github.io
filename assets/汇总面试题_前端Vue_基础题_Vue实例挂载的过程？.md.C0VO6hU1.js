import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.-E9IboRH.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/前端Vue/基础题/Vue实例挂载的过程？.md","filePath":"汇总面试题/前端Vue/基础题/Vue实例挂载的过程？.md"}'),n={name:"汇总面试题/前端Vue/基础题/Vue实例挂载的过程？.md"},e=t(`<p>Vue 实例的挂载过程是指 Vue 实例将其对应的组件渲染并挂载到页面的 DOM 元素上的过程。这个过程包括了初始化、编译、渲染和挂载等步骤。以下是 Vue 实例挂载的简要过程：</p><ol><li><strong>创建 Vue 实例</strong>：首先，创建一个 Vue 实例，通常通过实例化 Vue 构造函数并传入选项对象来完成，选项对象包括了数据、模板、生命周期钩子等配置。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Vue!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="2"><li><p><strong>编译模板</strong>：Vue 实例会将模板编译成渲染函数。在编译阶段，Vue 会解析模板中的指令、插值表达式等，并生成一个可执行的渲染函数。</p></li><li><p><strong>数据响应式</strong>：在挂载之前，Vue 会对实例的数据进行响应式处理，通过 Object.defineProperty 或 Proxy 等方式劫持数据对象的属性，从而能够监听数据的变化。</p></li><li><p><strong>创建虚拟 DOM</strong>：在渲染函数的执行过程中，Vue 实例会根据模板生成一个虚拟 DOM 树，这个虚拟 DOM 树表示了页面的结构和内容。</p></li><li><p><strong>挂载到 DOM</strong>：最后，Vue 实例会将生成的虚拟 DOM 渲染成真实的 DOM，并挂载到页面的指定元素上。这个过程包括了创建真实的 DOM 元素、将虚拟 DOM 渲染到真实 DOM 上、添加事件监听器等操作。</p></li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>通过以上步骤，Vue 实例完成了对应组件的渲染和挂载，将其渲染到页面上，从而完成了整个挂载过程。在挂载后，Vue 实例会监听数据的变化，并在数据发生变化时自动更新对应的视图，保持数据和视图的同步。</p>`,7),p=[e];function l(h,k,r,d,o,E){return a(),i("div",null,p)}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
