import{_ as e,c as t,o as r,a5 as a}from"./chunks/framework.-E9IboRH.js";const N=JSON.parse('{"title":"Number","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/JavaScript/备份/内置对象/数字和日期对象/Number/index.md","filePath":"前端/JavaScript/备份/内置对象/数字和日期对象/Number/index.md"}'),p={name:"前端/JavaScript/备份/内置对象/数字和日期对象/Number/index.md"},o=a('<h1 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h1><p>Number 构造函数包含常量和处理数值的方法。其他类型的值可以使用 Number() 函数转换为数值。</p><h2 id="常见的静态属性" tabindex="-1">常见的静态属性 <a class="header-anchor" href="#常见的静态属性" aria-label="Permalink to &quot;常见的静态属性&quot;">​</a></h2><p>Number.MAX_SAFE_INTEGER JavaScript 中最大的安全整数（253 - 1）。</p><p>Number.MAX_VALUE 能表示的最大正数。</p><p>Number.MIN_VALUE 能表示的最小正数即最接近 0 的正数（实际上不会变成 0）。</p><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><p>Number.isNaN() 确定传递的值是否是 NaN。</p><p>Number.isFinite() 确定传递的值类型及本身是否是有限数。</p><p>Number.isInteger() 确定传递的值类型是 number，且是整数。</p><p>Number.isSafeInteger() 确定传递的值是否为安全整数（数值在 -(253 - 1) 和 253 - 1）之间。</p><p>Number.parseFloat() 和全局对象 parseFloat() 一样。</p><p>Number.parseInt() 和全局对象 parseInt() 一样。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><p>Number.prototype.toExponential() 返回使用指数表示法表示数值的字符串。</p><p>Number.prototype.toFixed() 返回使用定点表示法表示数值的字符串。</p><p>Number.prototype.toLocaleString() 返回数值在特定语言环境下表示的字符串。覆盖 Object.prototype.toLocaleString() 方法。</p><p>Number.prototype.toPrecision() 返回数值使用定点表示法或指数表示法至指定精度的字符串。</p><p>Number.prototype.toString() 返回一个代表给定对象的字符串，基于指定的基数（radix）。覆盖 Object.prototype.toString() 方法。</p><p>Number.prototype.valueOf() 返回指定对象的原始值。覆盖 Object.prototype.valueOf() 方法。</p>',20),i=[o];function n(u,m,s,b,c,l){return r(),t("div",null,i)}const _=e(p,[["render",n]]);export{N as __pageData,_ as default};
