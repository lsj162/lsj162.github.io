import{_ as e,o,c as a,S as n}from"./chunks/framework.2524ba1c.js";const C=JSON.parse('{"title":"Node","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"前端/HTML/DOM 文档对象模型/Node/index.md","filePath":"前端/HTML/DOM 文档对象模型/Node/index.md"}'),s={name:"前端/HTML/DOM 文档对象模型/Node/index.md"},l=n(`<h1 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h1><p>Node 是一个接口，各种类型的 DOM API 对象会从这个接口继承。它允许我们使用相似的方式对待这些不同类型的对象；比如，继承同一组方法，或者用同样的方式测试。</p><p>以下接口都从 Node 继承其方法和属性：</p><div class="info custom-block"><p class="custom-block-title">备注：</p><p>Document, Element, Attr, CharacterData, ProcessingInstruction (en-US), DocumentFragment, DocumentType</p></div><h2 id="node-属性" tabindex="-1">Node 属性 <a class="header-anchor" href="#node-属性" aria-label="Permalink to &quot;Node 属性&quot;">​</a></h2><h3 id="node-nodevalue" tabindex="-1">Node.nodeValue <a class="header-anchor" href="#node-nodevalue" aria-label="Permalink to &quot;Node.nodeValue&quot;">​</a></h3><p>返回或设置当前节点的值。</p><p>语法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nodeValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nodeValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="node-方法" tabindex="-1">Node 方法 <a class="header-anchor" href="#node-方法" aria-label="Permalink to &quot;Node 方法&quot;">​</a></h2><h3 id="node-clonenode" tabindex="-1">Node.cloneNode <a class="header-anchor" href="#node-clonenode" aria-label="Permalink to &quot;Node.cloneNode&quot;">​</a></h3><p>增加节点</p><h3 id="node-clonenode-1" tabindex="-1">Node.cloneNode <a class="header-anchor" href="#node-clonenode-1" aria-label="Permalink to &quot;Node.cloneNode&quot;">​</a></h3><p>删除节点</p><h3 id="node-clonenode-2" tabindex="-1">Node.cloneNode <a class="header-anchor" href="#node-clonenode-2" aria-label="Permalink to &quot;Node.cloneNode&quot;">​</a></h3><p>更新节点</p><h3 id="node-clonenode-3" tabindex="-1">Node.cloneNode <a class="header-anchor" href="#node-clonenode-3" aria-label="Permalink to &quot;Node.cloneNode&quot;">​</a></h3><p>克隆节点</p><ul><li>语法</li></ul><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var dupNode = node.cloneNode(deep);</span></span></code></pre></div><p>node 将要被克隆的节点 dupNode 克隆生成的副本节点 deep 可选 是否采用深度克隆，如果为 true，则该节点的所有后代节点也都会被克隆，如果为 false，则只克隆该节点本身。</p><ul><li>示范</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">para1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">var p_prime </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cloneNode</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,23),t=[l];function p(d,c,r,i,h,u){return o(),a("div",null,t)}const y=e(s,[["render",p]]);export{C as __pageData,y as default};
