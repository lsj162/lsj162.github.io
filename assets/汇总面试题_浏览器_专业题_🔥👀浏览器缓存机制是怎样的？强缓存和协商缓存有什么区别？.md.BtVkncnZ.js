import{_ as t,c as o,o as l,a5 as i}from"./chunks/framework.-E9IboRH.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/浏览器/专业题/🔥👀浏览器缓存机制是怎样的？强缓存和协商缓存有什么区别？.md","filePath":"汇总面试题/浏览器/专业题/🔥👀浏览器缓存机制是怎样的？强缓存和协商缓存有什么区别？.md"}'),e={name:"汇总面试题/浏览器/专业题/🔥👀浏览器缓存机制是怎样的？强缓存和协商缓存有什么区别？.md"},a=i('<p>浏览器缓存机制是一种用于优化网络性能和减少数据传输量的技术，它通过保存已请求资源的副本并在下次请求时重用这些副本，从而减少了对服务器的请求次数和数据传输量。浏览器缓存机制通常分为两种类型：强缓存和协商缓存。</p><h3 id="强缓存-cache-control-和-expires" tabindex="-1">强缓存（Cache-Control 和 Expires）： <a class="header-anchor" href="#强缓存-cache-control-和-expires" aria-label="Permalink to &quot;强缓存（Cache-Control 和 Expires）：&quot;">​</a></h3><ul><li><p><strong>原理：</strong> 强缓存是通过在 HTTP 响应头中设置特定的缓存控制字段来实现的。这些字段告诉浏览器在<code>一定时间</code>内是否可以直接从本地缓存中加载资源，而无需向服务器发送请求。</p></li><li><p><strong>常用字段：</strong></p><ul><li><strong>Cache-Control：</strong> 使用 max-age 指定资源在缓存中的存储时间，单位为秒。</li><li><strong>Expires：</strong> 指定资源的到期时间，即过期时间点。这个字段在 HTTP/1.1 之前比较常见，但现在 Cache-Control 更常用。</li></ul></li><li><p><strong>优点：</strong> 强缓存不需要与服务器通信，直接从本地缓存中加载资源，能够显著提高页面加载速度。</p></li></ul><h3 id="协商缓存-last-modified-和-etag" tabindex="-1">协商缓存（Last-Modified 和 ETag）： <a class="header-anchor" href="#协商缓存-last-modified-和-etag" aria-label="Permalink to &quot;协商缓存（Last-Modified 和 ETag）：&quot;">​</a></h3><ul><li><p><strong>原理：</strong> 协商缓存通过在 HTTP 请求头中携带特定的字段，向<code>服务器询问资源</code>是否已经发生了变化。服务器根据这些字段进行判断，如果资源未发生变化，则返回 304 Not Modified 状态码，通知浏览器直接从缓存中加载资源。</p></li><li><p><strong>常用字段：</strong></p><ul><li><strong>Last-Modified：</strong> 指示资源的最后修改时间。</li><li><strong>ETag：</strong> 指示资源的唯一标识符，通常是资源内容的哈希值。</li></ul></li><li><p><strong>优点：</strong> 协商缓存可以在资源未过期的情况下，利用缓存的有效副本减少网络传输，同时避免了强缓存可能导致的缓存过期问题。</p></li></ul><h3 id="区别" tabindex="-1">区别： <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别：&quot;">​</a></h3><ul><li><p><strong>触发条件：</strong></p><ul><li>强缓存：在缓存有效期内，不向服务器发送请求，直接从缓存中加载资源。</li><li>协商缓存：在缓存过期后或者强缓存失效时，向服务器发送请求，根据服务器返回的响应头判断是否可以使用缓存。</li></ul></li><li><p><strong>判断依据：</strong></p><ul><li>强缓存：基于缓存的时间规则判断资源是否过期。</li><li>协商缓存：基于资源的 Last-Modified 和 ETag 字段进行判断，以确定资源是否发生变化。</li></ul></li><li><p><strong>优先级：</strong></p><ul><li>强缓存优先级高于协商缓存。如果强缓存生效，浏览器直接从缓存加载资源，不再向服务器发送请求。</li></ul></li></ul><p>综合使用强缓存和协商缓存可以有效地提升网站性能和用户体验，减少不必要的网络请求，并降低服务器负载。</p>',8),r=[a];function s(n,_,d,c,p,g){return l(),o("div",null,r)}const f=t(e,[["render",s]]);export{u as __pageData,f as default};
