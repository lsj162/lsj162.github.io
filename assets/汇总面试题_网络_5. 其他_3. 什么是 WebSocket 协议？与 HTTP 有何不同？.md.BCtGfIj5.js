import{_ as e,c as l,o as t,a5 as i}from"./chunks/framework.-E9IboRH.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"汇总面试题/网络/5. 其他/3. 什么是 WebSocket 协议？与 HTTP 有何不同？.md","filePath":"汇总面试题/网络/5. 其他/3. 什么是 WebSocket 协议？与 HTTP 有何不同？.md"}'),o={name:"汇总面试题/网络/5. 其他/3. 什么是 WebSocket 协议？与 HTTP 有何不同？.md"},_=i('<p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的网络协议，允许在客户端和服务器之间进行实时、双向的数据传输。相对于传统的 HTTP 协议，WebSocket 提供了更低的延迟和更高的效率，适用于需要实时性的应用，如在线聊天、实时数据更新等。</p><h3 id="websocket-与-http-的主要不同点" tabindex="-1">WebSocket 与 HTTP 的主要不同点： <a class="header-anchor" href="#websocket-与-http-的主要不同点" aria-label="Permalink to &quot;WebSocket 与 HTTP 的主要不同点：&quot;">​</a></h3><ol><li><p>连接方式：</p><ul><li>HTTP： 是一种无状态协议，每个请求和响应之间都是独立的，即使在同一用户会话中，每个请求都需要重新建立连接。</li><li>WebSocket： 通过单个 TCP 连接提供长期的、全双工的通信，避免了为每个通信请求建立新的连接的开销。</li></ul></li><li><p>实时性和效率：</p><ul><li>HTTP： 传统的 HTTP 通信是基于请求-响应模型的，实时性相对较差，需要不断地轮询或使用长轮询（long polling）来模拟实时性。</li><li>WebSocket： 提供实时、低延迟的通信，使得服务器可以主动向客户端推送数据，而无需等待客户端的请求。</li></ul></li><li><p>头部开销：</p><ul><li>HTTP： 每个 HTTP 请求和响应都包含一些额外的头部信息，增加了通信的开销。</li><li>WebSocket： 头部信息相对较小，仅在握手阶段有较多的头部，之后的数据传输中头部开销较小。</li></ul></li><li><p>握手过程：</p><ul><li>HTTP： 通常使用“请求-响应”模型，客户端向服务器发出请求，服务器响应后建立连接。</li><li>WebSocket： 在连接建立时进行握手，客户端和服务器通过协商进行连接，之后保持长期连接。</li></ul></li><li><p>协议标识：</p><ul><li>HTTP： 使用“http://”或“https://”协议标识。</li><li>WebSocket： 使用“ws://”（非加密连接）或“wss://”（加密连接）协议标识。</li></ul></li><li><p>适用场景：</p><ul><li>HTTP： 适用于请求-响应模式的通信，常用于传输静态内容、发起 API 请求等。</li><li>WebSocket： 适用于需要实时性和双向通信的场景，如在线聊天、实时通知、在线协作等。</li></ul></li></ol><p>总体而言，WebSocket 在实时性和效率方面优于传统的 HTTP 通信，特别适用于需要低延迟和双向通信的应用场景。然而，WebSocket 并不完全替代 HTTP，而是在需要时与 HTTP 结合使用，根据不同的场景选择合适的通信方式。</p>',4),T=[_];function c(a,p,s,P,r,n){return t(),l("div",null,T)}const b=e(o,[["render",c]]);export{S as __pageData,b as default};
